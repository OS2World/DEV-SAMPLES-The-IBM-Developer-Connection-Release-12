
BOOL  UnderDebug=TRUE; /* Global variable */


ULONG APIENTRY myHandler (PEXCEPTIONREPORTRECORD       pERepRec,
                          PEXCEPTIONREGISTRATIONRECORD pERegRec,
                          PCONTEXTRECORD               pCtxRec,
                          PVOID                        p)
{
   ULONG rc = XCPT_CONTINUE_SEARCH;

   if ((pERepRec->ExceptionNum & XCPT_SEVERITY_CODE) == XCPT_FATAL_EXCEPTION)
   {
      if (pERepRec->ExceptionNum != XCPT_PROCESS_TERMINATE &&
          pERepRec->ExceptionNum != XCPT_UNWIND &&
          pERepRec->ExceptionNum != XCPT_SIGNAL &&
          pERepRec->ExceptionNum != XCPT_BREAKPOINT &&
          pERepRec->ExceptionNum != XCPT_SINGLE_STEP &&
          pERepRec->ExceptionNum != XCPT_ASYNC_PROCESS_TERMINATE)
      {
         // If any of the above conditionals fail then we have to handle
         //    the fatal trap.
         int3();
         if (UnderDebug==FALSE)
             rc = HandleFatalException(pERepRec, pERegRec, pCtxRec, p);
      } else {
        if (pERepRec->ExceptionNum==XCPT_BREAKPOINT) {
            UnderDebug=FALSE;
            rc =XCPT_CONTINUE_EXECUTION;
        }
      }
   }

   return rc;
}


        title   int3.asm
        .386
        .387
CODE32  segment dword use32 public 'CODE'
CODE32  ends
DATA32  segment dword use32 public 'DATA'
DATA32  ends
CONST32_RO      segment dword use32 public 'CONST'
CONST32_RO      ends
BSS32   segment dword use32 public 'BSS'
BSS32   ends
DGROUP  group BSS32, DATA32
        assume  cs:FLAT, ds:FLAT, ss:FLAT, es:FLAT
CODE32  segment
        public int3
int3   proc
        int 3
        ret
int3   endp

CODE32  ends
end
