
/*
 * This file was generated by the SOM Compiler.
 * FileName: dragfold.ih.
 * Generated using:
 *     SOM Precompiler somipc: 2.2
 *     SOM Emitter emitih: 2.7
 */

/*
 * 
 * 
 *    Module Name: DRAGFOLD
 * 
 *    OS/2 Work Place Shell Sample Program - SOM 2.0 / IDL Version
 * 
 *    Copyright (C) 1993 IBM Corporation
 * 
 *        DISCLAIMER OF WARRANTIES.  The following [enclosed] code is
 *        sample code created by IBM Corporation. This sample code is not
 *        part of any standard or IBM product and is provided to you solely
 *        for  the purpose of assisting you in the development of your
 *        applications.  The code is provided "AS IS", without
 *        warranty of any kind.  IBM shall not be liable for any damages
 *        arising out of your use of the sample code, even if they have been
 *        advised of the possibility of such damages.
 * 
 */


#ifndef SOM_DRAGFOLD_ih
#define SOM_DRAGFOLD_ih

#pragma checkout(suspend)

#include <dragfold.h>

/*
 * Set the scope of methods functions
 */
#ifndef SOM_Scope
#ifdef __cplusplus
  #define SOM_Scope extern "C"
#else
  #define SOM_Scope extern
#endif  /* __cplusplus */
#endif  /* SOM_Scope */

#ifndef SOM_CurrentClass
    #define SOM_CurrentClass DRAGFOLDCClassData.parentMtab
#endif  /* SOM_CurrentClass */

#define DRAGFOLD_MaxNoMethods 0

/*
 * Instance data
 */
typedef void DRAGFOLDData;

/*
 * Begin stuff that only goes in the primary file
 */
#if (defined(DRAGFOLD_Class_Source) || defined(SOM_Module_dragfold_Source))

/*
 * Trace/Debug macro
 */
#ifndef DRAGFOLDMethodDebug
   #define DRAGFOLDMethodDebug(c,m) SOMMethodDebug(c,m)
#endif  /* DRAGFOLDMethodDebug */

/*
 * Current class macros for Instance and Meta classes.
 */
#undef SOMMeta
#define SOMMeta M_DRAGFOLDCClassData.parentMtab
#undef SOMInstance
#define SOMInstance DRAGFOLDCClassData.parentMtab

#ifndef M_DRAGFOLD_Class_Source
   #define M_DRAGFOLD_Class_Source
#endif    /* M_DRAGFOLD_Class_Source */

/*
 * Overridden method: wpDragOver
 */
#pragma linkage(dragf_wpDragOver, system)
SOM_Scope MRESULT  SOMLINK dragf_wpDragOver(DRAGFOLD *somSelf,
		HWND hwndCnr,
		PDRAGINFO pdrgInfo);
#ifndef somMN_wpDragOver_defined
#define somMN_wpDragOver_defined
   static char *somMN_wpDragOver = "wpDragOver";
   static somId somId_wpDragOver = &somMN_wpDragOver;
#endif  /* somMN_wpDragOver_defined */
#define DRAGFOLD_parent_WPFolder_wpDragOver(somSelf,hwndCnr,pdrgInfo) \
	((SOM_ParentNumResolve(WPObject, 1, DRAGFOLDCClassData.parentMtab, wpDragOver)) \
	 (somSelf,hwndCnr,pdrgInfo))
#ifndef SOMGD_pmc_WPFolder_wpDragOver
  #ifdef parent_WPFolder_wpDragOver
     #undef parent_WPFolder_wpDragOver
     #define SOMGD_pmc_WPFolder_wpDragOver 1
  #else
     #define parent_WPFolder_wpDragOver DRAGFOLD_parent_WPFolder_wpDragOver
  #endif /* parent_WPFolder_wpDragOver */
#endif /* SOMGD_pmc_WPFolder_wpDragOver */
#ifndef parent_wpDragOver
   #define parent_wpDragOver(somSelf,hwndCnr,pdrgInfo) \
	((SOM_ParentNumResolve(WPObject, 1, SOM_CurrentClass, wpDragOver)) \
	 (somSelf,hwndCnr,pdrgInfo))
#endif  /* parent_wpDragOver */
#define DRAGFOLD_parents_wpDragOver(arg0,arg1,arg2) \
  (void) DRAGFOLD_parent_WPFolder_wpDragOver(arg0,arg1,arg2);

/*
 * Overridden method: wpDrop
 */
#pragma linkage(dragf_wpDrop, system)
SOM_Scope MRESULT  SOMLINK dragf_wpDrop(DRAGFOLD *somSelf,
		HWND hwndCnr,
		PDRAGINFO pdrgInfo,
		PDRAGITEM pdrgItem);
#ifndef somMN_wpDrop_defined
#define somMN_wpDrop_defined
   static char *somMN_wpDrop = "wpDrop";
   static somId somId_wpDrop = &somMN_wpDrop;
#endif  /* somMN_wpDrop_defined */
#define DRAGFOLD_parent_WPFolder_wpDrop(somSelf,hwndCnr,pdrgInfo,pdrgItem) \
	((SOM_ParentNumResolve(WPObject, 1, DRAGFOLDCClassData.parentMtab, wpDrop)) \
	 (somSelf,hwndCnr,pdrgInfo,pdrgItem))
#ifndef SOMGD_pmc_WPFolder_wpDrop
  #ifdef parent_WPFolder_wpDrop
     #undef parent_WPFolder_wpDrop
     #define SOMGD_pmc_WPFolder_wpDrop 1
  #else
     #define parent_WPFolder_wpDrop DRAGFOLD_parent_WPFolder_wpDrop
  #endif /* parent_WPFolder_wpDrop */
#endif /* SOMGD_pmc_WPFolder_wpDrop */
#ifndef parent_wpDrop
   #define parent_wpDrop(somSelf,hwndCnr,pdrgInfo,pdrgItem) \
	((SOM_ParentNumResolve(WPObject, 1, SOM_CurrentClass, wpDrop)) \
	 (somSelf,hwndCnr,pdrgInfo,pdrgItem))
#endif  /* parent_wpDrop */
#define DRAGFOLD_parents_wpDrop(arg0,arg1,arg2,arg3) \
  (void) DRAGFOLD_parent_WPFolder_wpDrop(arg0,arg1,arg2,arg3);

/*
 * Initialize the class data structure
 */
struct DRAGFOLDClassDataStructure DRAGFOLDClassData = {(SOMAny *) NULL};

/*
 * Define the C class data structure
 */
struct DRAGFOLDCClassDataStructure DRAGFOLDCClassData = {(somMethodTabs) NULL};

/*
 * Routines and Structures to create the class object
 */

/*
 * Declare the Override Methods table.
 */
static somOverrideMethod_t DRAGFOLDOM[] = {
    {    &somId_wpDragOver,
         (somMethodProc *) dragf_wpDragOver    },
    {    &somId_wpDrop,
         (somMethodProc *) dragf_wpDrop    },
};


/*
 *  Initializers for class Ids
 */
static char * somCN_DRAGFOLD = "DRAGFOLD";
static char * somPCN_DRAGFOLD_WPFolder = "WPFolder";

static somId somPCDRAGFOLD[] = {
    &somPCN_DRAGFOLD_WPFolder,
};

static somStaticClassInfo DRAGFOLDSCI = {
    3, 0, 2, 0, 0, 0,
    DRAGFOLD_MajorVersion, DRAGFOLD_MinorVersion,
    0, DRAGFOLD_MaxNoMethods, 1,
    &somCN_DRAGFOLD,
    (somId) NULL, 1,
    somPCDRAGFOLD,
    (somClassDataStructure *) &DRAGFOLDClassData,
    (somCClassDataStructure *) &DRAGFOLDCClassData,
    (somStaticMethod_t *) NULL, DRAGFOLDOM,
    (char *) NULL,
    (somNonInternalData_t *) NULL,  (somProcMethods_t *) NULL,
    (somVarargsFuncs_t *) NULL,
    (somTP_somClassInitFunc *) NULL,
    0,
    0,  /* old style class, zero directinitclasses */
    0, /* no directinitclasses */
    0, /* number of methods */
    0, /* methods of the class */
    0, /* dataOffset1 */
    0, /* dataOffset2 */
    0, /* number of SelectInheritedMethods */
    0, /* SelectInheritedMethods */
    0, /* number of releaseorder entries */
    0, /* ReleaseOrder */
    0, /* number of migrated methods */
    0, /* migrated method implementations */
    0, /* number of initializers */
    0, /* initializers */
    0, /* used to identify a DTS class */
    0, /* used to register dynamically computed info */
};


DRAGFOLD * SOMLINK DRAGFOLDNewClass (integer4 somtmajorVersion,
		integer4 somtminorVersion)
{
    WPFolderNewClass(WPFolder_MajorVersion,WPFolder_MinorVersion);	/* static reference */
    return (somBuildClass(1,&DRAGFOLDSCI, somtmajorVersion, somtminorVersion));
}

/*
 * Functions for attributes.
 */

#endif                   /* DRAGFOLD_Class_Source */
#pragma checkout(resume)

#endif       /* SOM_DRAGFOLD_ih */
