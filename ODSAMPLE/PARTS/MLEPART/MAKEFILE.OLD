#----------------------------------------------------------------------------

# MAKEFILE for the MLEPART directory
# This makefile creates an executable in the release tree.

# COMPONENT_NAME: opendoc
#
# FUNCTIONS:
#
# ORIGINS:
#
# (C) COPYRIGHT International Business Machines Corp. 1994
# All Rights Reserved
# Licensed Materials - Property of IBM
#
# US Government Users Restricted Rights - Use, duplication or
# disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
#----------------------------------------------------------------------------
#
# History:
# 10/21/94     - Created
#
# Change History:
# ---------------
# Defect # Date     By  Description

#------------------------------------------------------------------------------
# Define Component Specific Macros
#----------------------------------------------------------------------------
# SUBSYS          - defines the name of the subsystem that this makefile is
#                   a part of.   It is the name of the subdirectory that is
#                   above all of the individual components
# SUBSYS_RELATIVE - defines the name of this component.
# SRC_RELATIVE    - defines the full path for the current directory from the
#                   ROOT.
# INSTPATH        - Release tree target directory
# PUBLIC          - Include file search path
#
# This uses the substitution feature which takes the current directory of
# this makefile (MAKEDIR) and removes the relative part of the directory to
# get the TOP level directory.
#
# The other macros are used to build directories in other levels of the tree.
#------------------------------------------------------------------------------

SUBSYS          = opendoc
SUBSYS_RELATIVE = od_parts\mlepart
SRC_RELATIVE    = src\$(SUBSYS)\$(SUBSYS_RELATIVE)
SRC_NL_RELATIVE = $(SRC_RELATIVE)\mlepart.nl

#------------------------------------------------------------------------------
# Define Component Non-specific Macros
#------------------------------------------------------------------------------
#  Use built in macro "MAKEDIR" to establish "ROOT".  Due to case sensitivity
#
#  of nmake macro substitution, try all lowercase then all uppercase.  Fail if
#  current working directory path is mixed case.  This is a current nmake
#  limitation on macro substitutions but should not be a problem for most
#  people.  We are searching for a fix to this problem.
#------------------------------------------------------------------------------
# \src\mm\misc\mmpmcrt is an example of the path for a specific component
# in the tree structure. Please change the path as applied to your component.
# Refer to Nmake documentation, if you have any questions about MAKEDIR
#------------------------------------------------------------------------------
ROOT            = $(MAKEDIR:\src\opendoc\od_parts\mlepart=)
!if "$(ROOT)" == "$(MAKEDIR)"
ROOT            = $(MAKEDIR:\SRC\OPENDOC\OD_PARTS\MLEPART=)
!endif
!if "$(ROOT)" == "$(MAKEDIR)"
!error Problem setting "ROOT"! Make sure current working directory is either all \
uppercase or all lowercase! \
ROOT is set to $(ROOT)
!endif

#-----------------------------------------------------------------
# Component/subsystem specific macros for use in header.mak
#-----------------------------------------------------------------
# Set up component/subsystem specific macros for use in header.mak
# This allows you establish a search order for header and lib paths.  A
# prefix would be a path that you would like to add to the beginning of
# the standard path which is set in header.mak.  A suffix tags onto the
# end of the standard path.
#-----------------------------------------------------------------
COMMON=$(SBASE)\common
#CMP_HDR_PREFIX = <specify non-default path(s) for front of INCLUDE path>
CMP_HDR_PREFIX =$(ODPRIV_HDR);$(COMMON)\include\od_parts;
#CMP_HDR_SUFFIX = <specify non-default path(s) for back INCLUDE path>
CMP_HDR_SUFFIX=
#CMP_LIB_PREFIX = <specify non-default path(s) for front of LIB path>
CMP_LIB_PREFIX=
#CMP_LIB_SUFFIX = <specify non-default path(s) for back LIB path>
CMP_LIB_SUFFIX=

# Uncomment to use ibmc libs.  With this out, it uses the
# default metaware libs location.
USE_IBMC_LIB = 1

#-----------------------------------------------------------------------
#INSTPATH = <specify the path for the files to be put in release tree>
#Instpath should be defined to get to the root of the install tree.
#For Example, suppose you want to place binaries in
#   \wpos\rel\386\retail\os2\toolkt\version1
# \wpos\rel\386\retail would be represented by $(R)
# Instpath = \os2\toolkt\version1
# Since REL=$(R)+$(INSTPATH), REL will become
# \wpos\rel\386\retail\os2\toolkt\version1
#-----------------------------------------------------------------------
# INSTPATH    = $(SUBSYS)
#-----------------------------------------------------------------------------
# PUBLIC can be one of "ibmmk", "cps","os2".  Please define the below macros
# if you want to include the public files in a different order.  These macros
# would be used if you have a preference as to which directory gets searched
# first.  For example, you would like to search the OS2 header or include
# files before you search the ibmmk header or include files.  In this case,
# you would specify PUBLIC1 = OS2 and PUBLIC2= IBMMK and PUBLIC3 = CPS.
# These macros are then used in header.mak to set the path order.
#------------------------------------------------------------------------------

PUBLIC1 = os2
#PUBLIC2 = cps

#------------------------------------------------------------------------------
# HOST_PROC and HOST_OS will be set in the environment by the build lab.
# Set them in your private builds.
# Please don't set these variables in the public build.
# HOST_PROC=386
# HOST_OS=OS2
#-----------------------------------------------------------------------------
# Include public and private makefile includes
#-----------------------------------------------------------------------------
# header.mak - the public makefile that sets up all paths and options.  It
# should not be altered.  Additions or changes to header.mak for a component
# can be overwritten in this makefile.  Additions or changes to header.mak
# for an entire subsystem can be overwritten in subsys.mak
#-----------------------------------------------------------------------------
#    Some Useful defined macros in Header.mak:
#
#           $(O)\  path for .obj .lst .map .sym etc... files
#-------------------------------------------------------------------------

!include $(ROOT)\header.mak

# subsys.mak - is used override any settings in the subsystem  that were
# set in header.mak.  It is owned by development.
#-------------------------------------------------------------------------

!include $(ROOT)\src\$(SUBSYS)\common\subsys.mak

#----------------------------------------------------------------
# Set up the list of suffixes, if the suffixes in header.mak are not
# sufficient.  Be sure to include the entire list.
#-----------------------------------------------------------------

.SUFFIXES:
.SUFFIXES: .cpp .idl .xh .xih .rc .res

#------------------------------------------------------------------------
# Please define all compiler, assembler, and linker flags here.
# Use if's to define the flags for each type of build.
#------------------------------------------------------------------------
RFLAGS     = -r
RF         = -x -p
!if  "$(TARGET_PROC)"=="ppc"
SCFLAGS      = -mppc -v -D_SOL_PPC -D_PLATFORM_OS2_
!endif
!if  "$(TARGET_PROC)"=="386"
SCFLAGS      = -v -D_PLATFORM_OS2_
!endif

SCLIST       = -s"xh;xih"
PRIVATE      = -p


!if  "$(TARGET_PROC)"=="ppc"
!    if "$(BLD_TYPE)"=="retail"
DBG_CFLAGS= -DODDebug=0
DBG_LFLAGS=
!    else
DBG_CFLAGS= -g -DODDebug
DBG_LFLAGS=
!    endif
DEFECTS=
DEFINES= -D_OS2 -DSOM2VERSION -D__OS2__
DEFS= -DPOWERPC -DMETAWARE -D_PLATFORM_OS2_  -D_PLATFORM_OS2_PPC_
CFLAGS= -c $(DBG_CFLAGS) $(SYSTEM_FLAGS) $(MW_IBMC_DEFS) -o $@ $(DEFINES) $(DEFS)\
                                 -Hpragma=Offwarn(39,88,178,257,290,311,587,652)\
                                 -Hpragma=os_id(4)\
                                 -Hcppext=cpp,c\
                                 -pic\
                                 -Hon=Char_default_unsigned\
                                 -w4
AFLAGS= $(OPT_AFLAGS)
!else
!    if "$(BLD_TYPE)"=="retail"
TEMPINC   = $(ROOT)\src\$(SUBSYS)\common\tempinc\retail
TEMPFLAGS = /Ft"$(TEMPINC)"
ASMDEBUGFLAGS  = /Ml
DBG_CFLAGS     = /O+ /Ti- /DODDebug=0
DBG_LFLAGS=
!    endif
!    if "$(BLD_TYPE)"=="profile"
TEMPINC   = $(ROOT)\src\$(SUBSYS)\common\tempinc\profile
TEMPFLAGS = /Ft"$(TEMPINC)"
ASMDEBUGFLAGS  = /Ml
DBG_CFLAGS     = /O+ /Ti+ /Gh+ /DODDebug=0
DBG_LFLAGS=
PRO_OBJS       = $(COMPILER_LIB)\dde4xtra.obj
!    endif
!    if "$(BLD_TYPE)"=="debug"
TEMPINC   = $(ROOT)\src\$(SUBSYS)\common\tempinc\debug
TEMPFLAGS = /Ft"$(TEMPINC)"
ASMDEBUGFLAGS  = /Ml /Zi /Zd
DBG_CFLAGS     = /O- /Ti+ /DODDebug=1
DBG_LFLAGS     = /DEBUG
!    endif
ASMFLAGS = $(ASMDEBUGFLAGS)
CFLAGS = $(DBG_CFLAGS) /Gm+ /Ge- /Tl- /Fd /Gd+ /Sp4 /Q /Fo$@ /Fi /Si /N30 /C+
CPPFLAGS = $(TEMPFLAGS) $(CFLAGS)
LFLAGS = $(DBG_LFLAGS) /noi /map /nod /nol /noe /pmtype:pm
!endif

#--------------------------------------------------------------------------
# If the Inference rules defined in header.mak are not sufficient, then
# define the inference rules necessary at this point.
# The following inference rules are just an example.
# You can delete this section if you don't need to add more inference rules.
#-------------------------------------------------------------------------
.idl{$(O)}.def:
         $(SC) $(SCFLAGS) -s def  -d $(O) $(@B).idl

.idl{$(W_OS2P_HDR)}.xh:
         $(SC) $(SCFLAGS) $(PRIVATE) -s xh  -d $(W_OS2P_HDR) $(@B).idl

.idl{$(W_OS2P_HDR)}.xih:
         $(SC) $(SCFLAGS) $(PRIVATE) -s xih -d $(W_OS2P_HDR) $(@B).idl

.idl{$(W_OS2_HDR)}.xh:
         $(SC) $(SCFLAGS) -s xh  -d $(W_OS2_HDR) $(@B).idl

.idl{$(W_OS2_IDL)}.idl:
         $(PDL) -d $(W_OS2_IDL) $(@B).idl

.c{$(O)}.obj:
        $(CC) $(CPPFLAGS) $(@B).c

.cpp{$(O)}.obj:
        $(CC) $(CPPFLAGS) $(@B).cpp
#------------------------------------------------------------------------
#Component defines start here.
#------------------------------------------------------------------------
MLEPARTdef       = $(O)\mlepart.def

MLEPARTidl       = $(W_OS2_IDL)\mlepart.idl

MLEPARTpubxh     = $(W_OS2_HDR)\mlepart.xh

MLEPARTxh        = $(W_OS2P_HDR)\mlepart.xh

MLEPARTxih       = $(W_OS2P_HDR)\mlepart.xih

MLEPARTlist      =  $(MLEPARTdef)  \
                    $(MLEPARTidl)  \
                    $(MLEPARTxh)   \
                    $(MLEPARTpubxh) \
                    $(MLEPARTxih)

MLEPARTobjs1 = $(O)\mlepart.obj $(O)\ordcoll.obj


!if "$(BLD_TYPE)"=="profile"
MLEPARTobjs = $(MLEPARTobjs1) $(PRO_OBJS)
!else
MLEPARTobjs = $(MLEPARTobjs1)
!endif

!if "$(TARGET_PROC)"=="ppc"
MLEPARTlibs= $(W_OS2_LIB)\libos2.a\
              $(W_OS2P_LIB)\libos2p.a\
              $(W_OS2_LIB)\libsom2.a\
              $(COMPILER_LIB)\libcmt.a \
              $(W_OS2_LIB)\libod.a

!else
MLEPARTlibs=  $(COMMON)\lib\os2386.lib\
              $(W_OS2P_LIB)\os2cmbsi.lib\
              $(W_OS2_LIB)\simplprt.lib\
              $(W_OS2_LIB)\somtk.lib\
              $(W_OS2_LIB)\opendoc.lib
!endif


#--------------------------------------------------------------------------
# Build Targets and Dependencies
#--------------------------------------------------------------------------
# The all target is used to specify a list of targets that need to be built
# Please don't delete "dep" from the target list.  It is used to generate the
# depend.mak file.
# Please look at the example for more details.
#-------------------------------------------------------------------------

all:  dep\
      $(MLEPARTlist) \
      $(DLL)\mlepart.dll

#--------------------------------------------------------------------------
# Build MLEPART DLL
#-------------------------------------------------------------------------

MLEPARTdll : $(DLL)\mlepart.dll
$(DLL)\mlepart.dll : makefile  \
                      $(MLEPARTobjs) \
                      $(MLEPARTlibs)
         $(CREATE_PATH)

!if "$(TARGET_PROC)"=="ppc"
# For PowerPc only
        @Echo --------------------------------
        @Echo - Linking MLEPART DLL
        @Echo - $(@B).dll
        @Echo --------------------------------
        $(LINK) $(DLL_LFLAGS)  @<<$(O)\$(*B).rsp
-o $@
-i $(O)\$(*B).def
$(DLL_INIT)
$(MLEPARTobjs: =^
)
$(HCLIB)
-lcmt
-los2
-los2p
-L $(W_OS2_LIB)
-lod
$(DLL_FINI)
<<keep
!endif

!if "$(TARGET_PROC)"=="386"
# if building for intel
        @Echo --------------------------------
        @Echo - Linking MLEPART DLL
        @Echo - $(@B).dll
        @Echo --------------------------------
       $(LINK) @<<$(O)\$(@B).lnk
$(LFLAGS) +
$(MLEPARTobjs: =+^
)
$@
$(O)\$(@B).map,
$(MLEPARTlibs: =+^
)
$(O)\$(@B).def
<<keep
      $(MAPSYM) $(O)\mlepart.map
      copy $(O)\mlepart.map $(DLL)
      copy mlepart.sym $(DLL)
      del  mlepart.sym
!endif

#***************************************************************************
# Include Footer.mak at this point.
#***************************************************************************

!include $(ROOT)\footer.mak

#****************************************************************************
#  Dependency generation and Checking
#****************************************************************************
$(O)\depend.mak:  $(O)\dephold
        -$(CREATE_PATH)
        -$(TOUCH) $(O)\depchk
        -echo generate depend.mak
        $(INCLUDES) $(HCINC) -e -lxh -sxh -C=idl *.idl > $@  2>nul
        $(INCLUDES) $(HCINC) -e -lobj -C=xh -C=xih -C=api *.cpp >> $@  2>nul
        $(INCLUDES) $(HCINC) -e -lxh  -sres -C=rc -C=xh -C=xih -C=api\
                              *.rc >> $@  2>nul
        -del $(O)\depchk

$(O)\dephold:
        -$(TOUCH) $@
