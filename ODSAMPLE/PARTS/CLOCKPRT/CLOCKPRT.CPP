/*
 *      File:           ClockPrt.cpp
 *
 *   Copyright: (c) 1994 by IBM Corp., all rights reserved.
 *
 *   Change History (most recent first):
 *
 *      145987  12/06/95   jso      Change externalization for kind fixes      
 *      140645  10/18/95   jso      Change frameshape when presentation changes
 *      123251  10/06/95   jso      Added new methods so the part can
 *                                  support digital and analog presentations
 *      137664  09/21/95   aml      API change for ODTransform::TransformPoint
 *      125332   6/12/95   jso      Fixes for Binding properly
 *      122425   6/08/95   ced      Fixes for displaying properly when root part
 *      120017  04/22/95   ced      Clean-up code some.
 *      117472  04/17/95   ced      Associate clock class with frame part info
 *                                  instead of with part instance.
 *      117544  04/03/95   map      replaced true/false with kODTrue/kODFalse
 *      117472  04/01/95   ced      Changes to support printing and
 *                                  non-linear transform.
 *        <1>   11/05/94   ced      Modifications required because root facet
 *                                  external transform now scales from OpenDoc
 *                                  72 dpi coordinate space to device coordinate
 *                                  space.  Changes are labed with (CED - 110594).
 *
 *   Copyright: (c) 1993-1994 by IBM Corp., all rights reserved.
 *
 */

/*
 *  This file was generated by the SOM Compiler and Emitter Framework.
 *  Generated using:
 *      SOM Emitter emitxtm: 2.38
 */

#ifndef _ALTPOINT_
#include "AltPoint.h"
#endif

#ifndef _EXCEPT_
#include "Except.h"
#endif

#ifndef SOM_Module_clockprt_Source
#define SOM_Module_clockprt_Source
#endif
#define ClockPart_Class_Source
#define VARIABLE_MACROS

#include "ClockPrt.xih"


#define INCL_GPI
#define INCL_WIN

#define INCL_ODAPI
#define INCL_ODARBITRATOR
#define INCL_ODCANVAS
#define INCL_ODDRAGANDDROP
#define INCL_ODDRAFT
#define INCL_ODERRORS
#define INCL_ODEXCEPT
#define INCL_ODFACET
#define INCL_ODFOCUSSET
#define INCL_ODFRAME
#define INCL_ODMENUBAR
#define INCL_ODSHAPE
//#define INCL_ODSEMANTICINTERFACE
#define INCL_ODSESSION
#define INCL_ODSTORAGEUNIT
#define INCL_ODSTORAGEUNITVIEW
#define INCL_ODTRANSFORM
#define INCL_ODUNDO
#define INCL_ODWINDOW
#define INCL_ODWINDOWSTATE
#include <os2.h>


#ifndef _CLOCKDEF_
#include "ClockDef.h"
#endif

#ifndef _CLOCK_
#include "Clock.h"
#endif

#ifndef _ORDCOLL_
#include "OrdColl.h"
#endif

#ifndef _FOCUSLIB_
#include "focuslib.h"
#endif

#ifndef _TEMPOBJ_
#include "TempObj.h"
#endif

#ifndef _ODUTILS_
#include "ODUtils.h"
#endif

#include <builtin.h>

#include <ClockSet.xh>


// flag marking changes/additions for transparency
#define ACWSTUFF

//==============================================================================
// #Defines for the ClockPart class
//==============================================================================

#define kCPTimerFrequency            20
#define kPartHandlerDllName "ClockPart:clockprt"
#define kPartHandlerName "ClockPart"
#define kODKindTestClock "+//ISO 9070/ANSI::113722::US::CI LABS::IBM:Kind:Test:Clock"
//#define THROW(a) throw a
const ODType   kClockPartKindDisplayName = "Clock Part Kind";

#ifdef ACWSTUFF
// --- UTILITY ------------------------------------------------------
ODBoolean SetFocus( Environment *ev, ODStorageUnit* su,
                    ODPropertyName prop, ODValueType val )
{
  if ( su->Exists(ev, prop, val, 0) ) {
    su->Focus(ev, prop, kODPosUndefined, val, (val != NULL ? 0 : 1), kODPosUndefined);
    return kODTrue;
  }
  return kODFalse;
}
#endif


SOM_Scope PartInfoRec* SOMLINK ClockPartAllocFramePartInfo(ClockPart *somSelf,
                                                          Environment *ev)
{
//  ClockPartData *somThis = ClockPartGetData(somSelf);
    ClockPartMethodDebug("ClockPart","ClockPartAllocFramePartInfo");

    PartInfoRec* pInfo = new ClockPartInfoRec;
    return pInfo;
}


SOM_Scope void  SOMLINK ClockPartDisplayClock(ClockPart *somSelf,
                                               Environment *ev,
                                              ODFacet* facet,
                                              DrawType whatToDraw,
                                              ODShape* invalidShape)
{
    ClockPartData *somThis = ClockPartGetData(somSelf);
    ClockPartMethodDebug("ClockPart","ClockPartDisplayClock");

   SOM_TRY

    HPS hps;
    CFocus f(ev, facet, invalidShape, &hps);
    ODCanvas* canvas = facet->GetCanvas(ev);

    ODRect bbox;
    TempODShape frameShape = facet->GetFrame(ev)->AcquireFrameShape(ev, canvas);
    frameShape->GetBoundingBox(ev, &bbox);
    RECTL rclFrame;
    bbox.AsRECTL(rclFrame);

    ClockPartInfoRec* pInfo = (ClockPartInfoRec*)facet->GetFrame(ev)->GetPartInfo(ev);
    if( whatToDraw == drawClock )
    {
#ifdef ACWSTUFF
        pInfo->clock-> Draw(hps, &rclFrame, (canvas->IsDynamic(ev) && !canvas->IsOffscreen(ev)), _fTransparent);
#else
        pInfo->clock-> Draw(hps, &rclFrame, (canvas->IsDynamic(ev) && !canvas->IsOffscreen(ev)));
#endif
    }
    else if (canvas->IsDynamic(ev) && !canvas->IsOffscreen(ev))
    {
       if (pInfo->clock-> Timer(hps,  &rclFrame))
       {
          facet->Invalidate(ev, kODNULL, kODNULL);
       }
    }

   SOM_CATCH_ALL
   SOM_ENDTRY
}

#ifdef ACWSTUFF
//----------------------------------------------------------------------------------------
SOM_Scope void  SOMLINK ClockPartContainingPartPropertiesUpdated( ClockPart *somSelf,
                                                     Environment *ev, ODFrame* frame,
                                                     ODStorageUnit* propertyUnit)
{
  ClockPartData *somThis = ClockPartGetData(somSelf);
  ClockPartMethodDebug("ClockPart","ContainingPartPropertiesChanged");

  // is the background transparency in there?
  if (SetFocus( ev, propertyUnit, kODBackgroundTransparency, kODBoolean )) {

    StorageUnitGetValue(propertyUnit, ev, sizeof(_fTransparent), &_fTransparent );

    frame->Invalidate(ev, NULL, kODNULL);
  }
}
#endif

SOM_Scope void  SOMLINK ClockPartResize(ClockPart *somSelf,  Environment *ev,
                                        ODFrame* frame, ODFacet* facet)
{
    ClockPartData *somThis = ClockPartGetData(somSelf);
    ClockPartMethodDebug("ClockPart","ClockPartResize");

   SOM_TRY

    HRGN  hrgnFrame;
    HRGN  hrgnUsed;
    ODRect frameRect;
    LONG  cxFrame, cyFrame;
    ODCanvas* canvas = facet->GetCanvas(ev);
    TempODShape requestedShape = 0, newShape = 0, usedShape = 0, frameShape = 0;
    TempODTransform xform = 0, frameTransform = 0;
    ODPoint scale;

    /* square the frame */
    TempODShape tempShape = frame->AcquireFrameShape(ev, canvas);
    tempShape->GetBoundingBox(ev, &frameRect);

    cxFrame = frameRect.right - frameRect.left;
    cyFrame = frameRect.top - frameRect.bottom;
    if (cxFrame > cyFrame)
       frameRect.right = frameRect.left  + cyFrame;
    else if (cxFrame < cyFrame)
       frameRect.top = frameRect.bottom + cxFrame;

    if (!frame->IsRoot(ev))
    {
       /* request the new frame shape */
       requestedShape = frame->CreateShape(ev);
       requestedShape->SetRectangle(ev, &frameRect);
       frameShape = frame->RequestFrameShape(ev, requestedShape, canvas);
       frameShape->Acquire(ev);
    }
    else
       frameShape = frame->AcquireFrameShape(ev, canvas);

    /* Calculate the Used shape */
    frameShape->GetBoundingBox(ev, &frameRect);
    frameTransform = facet->AcquireFrameTransform(ev, canvas);
    xform = frameTransform->Copy(ev);

    // Make transform a scaling transform only so that the resolution of the used shape
    // approximates the resolution of the image on the device.

    xform->GetScale(ev, &scale);
    xform->Reset(ev);
    xform->ScaleBy(ev, &scale);

    xform->TransformPoint(ev, (ODPoint*)&frameRect);     // [137664]
    xform->TransformPoint(ev, (ODPoint*)&frameRect + 1); // [137664]

    RECTL rclFrame;
    frameRect.AsRECTL(rclFrame);

    ClockPartInfoRec* pInfo = (ClockPartInfoRec*)facet->GetFrame(ev)->GetPartInfo(ev);
    pInfo->clock-> Size( rclFrame, &hrgnUsed);

    usedShape = frame->CreateShape(ev);
    usedShape->SetRegion(ev, hrgnUsed);
    usedShape->InverseTransform(ev, xform);
    // if the mode is Analog we will change the used shape to a circle
    // if not, we'll keep it square  [140645]
    if(strcmp(_fMode, "Analog") == 0)
      frame->ChangeUsedShape(ev, usedShape, canvas);
    else
      frame->ChangeUsedShape(ev, kODNULL, canvas);


   SOM_CATCH_ALL
   SOM_ENDTRY
}


SOM_Scope void  SOMLINK ClockPartFrameShapeChanged(ClockPart *somSelf,
                                                    Environment *ev,
                                                   ODFrame* frame)
{
//  ClockPartData *somThis = ClockPartGetData(somSelf);
    ClockPartMethodDebug("ClockPart","ClockPartFrameShapeChanged");

   SOM_TRY

    TempODFrameFacetIterator facets = frame->CreateFacetIterator(ev);
    ODFacet* facet = facets->First(ev);
    if (facet) {
       somSelf-> Resize(ev,  frame, facet);  // (CED - 110594)
       TempODShape usedShape = frame->AcquireUsedShape(ev, kODNULL);

       for (facet = facets->First(ev);
            facets->IsNotComplete(ev);
            facet = facets->Next(ev))
       {
          if (facet->GetCanvas(ev)->IsDynamic(ev))
          {
             TempODShape activeShape = usedShape->Copy(ev);
             facet->ChangeActiveShape(ev, activeShape, facet->GetCanvas(ev));
          }
       }
    }

   SOM_CATCH_ALL
   SOM_ENDTRY

}

SOM_Scope void  SOMLINK ClockPartFacetAdded(ClockPart *somSelf,
                                             Environment *ev,
                                            ODFacet* facet)
{
//  ClockPartData *somThis = ClockPartGetData(somSelf);
    ClockPartMethodDebug("ClockPart","ClockPartFacetAdded");

   SOM_TRY

    ODFrame * frame = facet->GetFrame(ev);
    TempODFrameFacetIterator facets = frame->CreateFacetIterator(ev);

    // if this is the first facet, give the part a chance to resize the frame

    facets->First(ev);
    if (!facets->Next(ev))         //Only one facet?
    {
        somSelf->Resize(ev, frame, facet);
    }

    ODCanvas* canvas = facet->GetCanvas(ev);
    if (canvas->IsDynamic(ev))
    {
       TempODShape usedShape = facet->GetFrame(ev)->AcquireUsedShape(ev, canvas);
       TempODShape activeShape = usedShape->Copy(ev);
       facet->ChangeActiveShape(ev, activeShape, canvas);
    }

    HWND hwnd = facet->GetFacetHWND(ev);
    if (hwnd)
       WinStartTimer(WinQueryAnchorBlock(hwnd), hwnd, 0, 1000);

   SOM_CATCH_ALL
   SOM_ENDTRY

}

SOM_Scope void  SOMLINK ClockPartDraw(ClockPart *somSelf,  Environment *ev,
                                      ODFacet* facet, ODShape* invalidShape)
{
//  ClockPartData *somThis = ClockPartGetData(somSelf);
    ClockPartMethodDebug("ClockPart","ClockPartDraw");

    SOM_TRY

     somSelf-> DisplayClock( ev, facet, drawClock, invalidShape);

    SOM_CATCH_ALL
    SOM_ENDTRY
}


SOM_Scope void  SOMLINK ClockPartGeometryChanged(ClockPart *somSelf, Environment *ev,
    ODFacet* facet, ODBoolean clipShapeChanged, ODBoolean externalTransformChanged)

{
//  ClockPartData *somThis = ClockPartGetData(somSelf);
    ClockPartMethodDebug("ClockPart","ClockPartGeometryChanged");

}

SOM_Scope void  SOMLINK ClockPartCloneInto(ClockPart *somSelf, Environment *ev,
    ODDraftKey key,
    ODStorageUnit* toSU,
    ODFrame* scopeFrame)
{
//  ClockPartData *somThis = ClockPartGetData(somSelf);
    ClockPartMethodDebug("ClockPart","ClockPartCloneInto");

   SOM_TRY

    ODStorageUnit*   su = somSelf->GetStorageUnit(ev);
    ODDraft*      draft = su->GetDraft(ev);


    somSelf->Externalize(ev);

    ODID scopeFrameID = 0;
    if (scopeFrame != kODNULL)
      scopeFrameID = scopeFrame->GetStorageUnit(ev)->GetID(ev);
    su->CloneInto(ev, key, toSU, scopeFrameID);

   SOM_CATCH_ALL
   SOM_ENDTRY

}

SOM_Scope void  SOMLINK ClockPartExternalize(ClockPart *somSelf,
                                              Environment *ev)
{
//  ClockPartData *somThis = ClockPartGetData(somSelf);
    ClockPartMethodDebug("ClockPart","ClockPartExternalize");

   SOM_TRY

    ODStorageUnit*   su = somSelf->GetStorageUnit(ev);
    su->AddProperty(ev, kODPropPart);
    su->AddValue(ev, kODISOStr);
    ODByteArray ba;
    ba._length = strlen(kPartHandlerDllName);
    ba._maximum = strlen(kPartHandlerDllName) + 1;
    ba._buffer = (octet*) kPartHandlerDllName;
    su->SetValue(ev, &ba);

    if(!su->Exists(ev, kODPropContents, kODKindTestClock, 0))
    {
      su->AddProperty(ev, kODPropContents)->AddValue(ev, kODKindTestClock);
    }

   SOM_CATCH_ALL
   SOM_ENDTRY

}

SOM_Scope ODBoolean  SOMLINK ClockPartHandleEvent(ClockPart *somSelf,
                                                   Environment *ev,
                                                  ODEventData* event,
                                                  ODFrame* frame,
                                                  ODFacet* facet,
                                                  ODEventInfo* eventInfo)
{
//  ClockPartData *somThis = ClockPartGetData(somSelf);
    ClockPartMethodDebug("ClockPart","ClockPartHandleEvent");

   SOM_TRY

    switch( event-> msg)
    {
    case WM_CHAR:
       return kODTrue;        // prevent simple part from beeping

    case WM_TIMER:
       somSelf-> DisplayClock(ev,  facet, drawTimer, kODNULL );

    default:
       return ClockPart_parent_SimplePart_HandleEvent(somSelf, ev, event, frame, facet, eventInfo);
    }

   SOM_CATCH_ALL
   SOM_ENDTRY

    return kODFalse;
}


SOM_Scope void  SOMLINK ClockPartDisplayFrameAdded(ClockPart *somSelf,
                                                   Environment *ev,
                                                   ODFrame* frame)
{
    ClockPartData *somThis = ClockPartGetData(somSelf);
    ClockPartMethodDebug("ClockPart","ClockPartAddDisplayFrame");

   SOM_TRY

    ClockPart_parent_SimplePart_DisplayFrameAdded(somSelf, ev, frame);

    ClockPartInfoRec* pInfo = (ClockPartInfoRec*)frame->GetPartInfo(ev);
    pInfo->clock = new Clock;

    ODSession * session  = somSelf->GetStorageUnit(ev)->GetSession(ev);
    if(!_fMode) // [140645]
      _fMode = new char[25];
    if(frame->GetPresentation(ev) == session->Tokenize(ev, "Digital"))
    {
      pInfo->clock-> SetMode(DM_TIME | DM_DIGITAL | DM_SECONDHAND);
      strcpy(_fMode, "Digital");
    }
    else
      strcpy(_fMode, "Analog");


   SOM_CATCH_ALL
   SOM_ENDTRY

}

SOM_Scope void  SOMLINK ClockPartDisplayFrameConnected(ClockPart *somSelf,
                                                   Environment *ev,
                                                   ODFrame* frame)
{
    ClockPartData *somThis = ClockPartGetData(somSelf);
    ClockPartMethodDebug("ClockPart","ClockPartDisplayFrameConnected");

   SOM_TRY

    ClockPart_parent_SimplePart_DisplayFrameConnected(somSelf, ev, frame);

    ClockPartInfoRec* pInfo = (ClockPartInfoRec*)frame->GetPartInfo(ev);
    pInfo->clock = new Clock;
    if(!_fMode) // [140645]
      _fMode = new char[25];

    ODSession * session  = somSelf->GetStorageUnit(ev)->GetSession(ev);
    if(frame->GetPresentation(ev) == session->Tokenize(ev, "Digital"))
    {
      pInfo->clock-> SetMode(DM_TIME | DM_DIGITAL | DM_SECONDHAND);
      strcpy(_fMode, "Digital");
    }
    else
      strcpy(_fMode, "Analog");

   SOM_CATCH_ALL
   SOM_ENDTRY

}

SOM_Scope void  SOMLINK ClockPartDisplayFrameRemoved(ClockPart *somSelf,
                                                     Environment *ev,
                                                     ODFrame* frame)
{
//  ClockPartData *somThis = ClockPartGetData(somSelf);
    ClockPartMethodDebug("ClockPart","ClockPartRemoveDisplayFrame");

   SOM_TRY

    ClockPartInfoRec* pInfo = (ClockPartInfoRec*)frame->GetPartInfo(ev);
    delete pInfo->clock;

    ClockPart_parent_SimplePart_DisplayFrameRemoved(somSelf, ev, frame);

   SOM_CATCH_ALL
   SOM_ENDTRY

}

SOM_Scope void  SOMLINK ClockPartDisplayFrameClosed(ClockPart *somSelf,
                                                    Environment *ev,
                                                    ODFrame* frame)
{
//  ClockPartData *somThis = ClockPartGetData(somSelf);
    ClockPartMethodDebug("ClockPart","ClockPartCloseDisplayFrame");

   SOM_TRY

    ClockPartInfoRec* pInfo = (ClockPartInfoRec*)frame->GetPartInfo(ev);
    delete pInfo->clock;

    ClockPart_parent_SimplePart_DisplayFrameClosed(somSelf, ev, frame);

   SOM_CATCH_ALL
   SOM_ENDTRY

}

SOM_Scope ODExtension*  SOMLINK ClockPartAcquireExtension(ClockPart *somSelf,
                                                           Environment *ev,
                                                          ODType extensionName)
{
    ClockPartData *somThis = ClockPartGetData(somSelf);
    ClockPartMethodDebug("ClockPart","ClockPartAcquireExtension");

   SOM_TRY

    if(!strcmp(extensionName, kODSettingsExtension) ){
       if (!_fNotebook) {
          _fNotebook = new ClockSet;
          _fNotebook->InitSettingsExtension( ev, _fPartWrapper);
       } /* endif */
       _fNotebook->Acquire(ev);
       return _fNotebook;
    }
    else {
       return ClockPart_parent_SimplePart_AcquireExtension(somSelf, ev, extensionName);
    } /* endif */

   SOM_CATCH_ALL
   SOM_ENDTRY

}

SOM_Scope void  SOMLINK ClockPartReleaseExtension(ClockPart *somSelf,
                                                       Environment *ev,
                                                      ODExtension* extension)
{
    ClockPartData *somThis = ClockPartGetData(somSelf);
    ClockPartMethodDebug("ClockPart","ClockPartReleaseExtension");

   SOM_TRY

    if ( !extension ) return;

    if(_fNotebook == extension) {
       _fNotebook->Release( ev);
       _fNotebook = 0;
    }
    else {
       ClockPart_parent_SimplePart_ReleaseExtension(somSelf, ev,extension);
    } /* endif */

   SOM_CATCH_ALL
   SOM_ENDTRY

}

SOM_Scope ODBoolean  SOMLINK ClockPartHasExtension(ClockPart *somSelf,
                                                        Environment *ev,
                                                       ODType extensionName)
{
    ClockPartData *somThis = ClockPartGetData(somSelf);
    ClockPartMethodDebug("ClockPart","ClockPartHasExtension");

   SOM_TRY

    if( !strcmp(extensionName, kODSettingsExtension))
       return kODTrue;
    else
       return ClockPart_parent_SimplePart_HasExtension(somSelf, ev, extensionName);

   SOM_CATCH_ALL
   SOM_ENDTRY

   return kODFalse;
}

SOM_Scope void  SOMLINK ClockPartPresentationChanged(ClockPart *somSelf,
                                                          Environment *ev,
                                                         ODFrame* frame)
{

    ClockPartData *somThis = ClockPartGetData(somSelf);
    ClockPartMethodDebug("ClockPart","ClockPartPresentationChanged");

   SOM_TRY

    ClockPartInfoRec* pInfo = (ClockPartInfoRec*)frame->GetPartInfo(ev);

    ODSession* session = somSelf->GetStorageUnit(ev)->GetSession(ev);
    TempODFrameFacetIterator facets = frame->CreateFacetIterator(ev);
    ODFacet* facet = facets->First(ev);
    TempODShape usedShape = frame->AcquireUsedShape(ev, kODNULL);

    if(frame->GetPresentation(ev) == session->Tokenize(ev, "Digital"))
    {
      pInfo->clock-> SetMode(DM_TIME | DM_DIGITAL | DM_SECONDHAND);
      strcpy(_fMode, "Digital"); // [140645]
    }
    else
    {
      pInfo->clock-> SetMode(DM_TIME | DM_ANALOG | DM_SECONDHAND);
      frame->SetPresentation(ev, session->Tokenize(ev, kODPresDefault));
      strcpy(_fMode, "Analog");
    }
    somSelf->FrameShapeChanged(ev, frame);
    somSelf->Draw(ev, facet, usedShape);

   SOM_CATCH_ALL
   SOM_ENDTRY

}

SOM_Scope void  SOMLINK ClockPartInitPart(ClockPart *somSelf,
                                            Environment *ev,
    ODStorageUnit* storageUnit, ODPart* partWrapper)
{
    ClockPartData *somThis = ClockPartGetData(somSelf);
    ClockPartMethodDebug("ClockPart","ClockPartInitPart");

   SOM_TRY

#ifdef ACWSTUFF
    _fTransparent = kODFalse;
#endif
    _fPartWrapper = partWrapper;
    _fMode = 0;  // [140645]

    ClockPart_parent_SimplePart_InitPart(somSelf, ev, storageUnit, partWrapper);
    if(storageUnit->Exists(ev, kODPropContents, 0, 0))
    {
       storageUnit->Focus(ev, kODPropContents, kODPosUndefined, kODNULL, 0, kODPosAll);
       storageUnit->Remove(ev);
    }

    storageUnit->AddProperty(ev, kODPropContents)->AddValue(ev, kODKindTestClock);

   SOM_CATCH_ALL
   SOM_ENDTRY
}

SOM_Scope void  SOMLINK ClockPartInitPartFromStorage(ClockPart *somSelf,
                                            Environment *ev,
    ODStorageUnit* storageUnit, ODPart* partWrapper)
{
    ClockPartData *somThis = ClockPartGetData(somSelf);
    ClockPartMethodDebug("ClockPart","ClockPartInitPartFromStorage");

   SOM_TRY

#ifdef ACWSTUFF
    _fTransparent = kODFalse;
#endif
    _fPartWrapper = partWrapper;
    _fMode = 0;  // [140645]

    ClockPart_parent_SimplePart_InitPartFromStorage(somSelf, ev, storageUnit, partWrapper);
    if(storageUnit->Exists(ev, kODPropContents, 0, 0))
    {
       storageUnit->Focus(ev, kODPropContents, kODPosUndefined, kODNULL, 0, kODPosAll);
       storageUnit->Remove(ev);
    }

    storageUnit->AddProperty(ev, kODPropContents)->AddValue(ev, kODKindTestClock);

   SOM_CATCH_ALL
   SOM_ENDTRY
}

SOM_Scope void  SOMLINK ClockPartsomUninit(ClockPart *somSelf)
{
    ClockPartData *somThis = ClockPartGetData(somSelf);
    ClockPartMethodDebug("ClockPart","ClockPartsomUninit");
    // [140645]
    if(_fMode)
       delete [] _fMode;

    ClockPart_parent_SimplePart_somUninit(somSelf);
}

#ifdef __IBMC___
  #pragma linkage (SOMInitModule, system)
#endif


SOMEXTERN void SOMLINK SOMInitModule (long majorVersion, long minorVersion,
                                 string className)
{
   SOM_IgnoreWarning (majorVersion);  /* This function makes   */
   SOM_IgnoreWarning (minorVersion);  /* no use of the passed  */
   SOM_IgnoreWarning (className);     /* arguments.            */

   ClockPartNewClass ( ClockPart_MajorVersion, ClockPart_MinorVersion);
}

SOM_Scope ISOString  SOMLINK M_ClockPartclsGetODPartHandlerName(M_ClockPart *somSelf,
                                                                 Environment *ev)
{
    /* M_ClockPartData *somThis = M_ClockPartGetData(somSelf); */
    M_ClockPartMethodDebug("M_ClockPart","M_ClockPartclsGetODPartHandlerName");

    string handlerName = kPartHandlerName;
    return (ISOString) handlerName;
}

SOM_Scope string  SOMLINK M_ClockPartclsGetODPartHandlerDisplayName(M_ClockPart *somSelf,
                                                                     Environment *ev)
{
    /* M_ClockPartData *somThis = M_ClockPartGetData(somSelf); */
    M_ClockPartMethodDebug("M_ClockPart","M_ClockPartclsGetODPartHandlerDisplayName");

    string displayName = "Clock Part";
    return displayName;
}

SOM_Scope _IDL_SEQUENCE_PartKindInfo  SOMLINK M_ClockPartclsGetODPartKinds(M_ClockPart *somSelf,
                                                                            Environment *ev)
{
    /* M_ClockPartData *somThis = M_ClockPartGetData(somSelf); */
    M_ClockPartMethodDebug("M_ClockPart","M_ClockPartclsGetODPartKinds");

    _IDL_SEQUENCE_PartKindInfo ClockPartInfo;

    // Create structure PartKindInfo  and allocate memory for variable
    PartKindInfo * info = (PartKindInfo *)SOMMalloc(sizeof(PartKindInfo));
    info->partKindName = (ISOString) SOMMalloc(strlen(kODKindTestClock) + 1);
    info->partKindDisplayName = (string)SOMMalloc(strlen(kClockPartKindDisplayName)+1);
    info->filenameFilters =  (string)SOMMalloc(strlen("")+1);
    info->filenameTypes =  (string)SOMMalloc(strlen("")+1);
    info->categories =  (string)SOMMalloc(strlen(kODCategoryTime)+1);
    info->categoryDisplayName =  (string)SOMMalloc(strlen("Time")+1);
    info->objectID =  (string)SOMMalloc(strlen("")+1);
    // Copy the information into the structure
    strcpy(info->partKindName , kODKindTestClock);
    strcpy(info->partKindDisplayName, kClockPartKindDisplayName);
    strcpy(info->filenameFilters, "");
    strcpy(info->filenameTypes, "");
    strcpy(info->categories, kODCategoryTime);
    strcpy(info->categoryDisplayName, "Time");
    strcpy(info->objectID, "");


    ClockPartInfo._maximum = 1;
    ClockPartInfo._length = 1;
    ClockPartInfo._buffer = info;
    return ClockPartInfo;
}

