    
/*
 *  This file was generated by the SOM Compiler.
 *  Generated using:
 *     SOM incremental update: 2.41
 */

/*
 *      File:           SimplPrt.cpp
 *
 *   Contains:  Implementation of Simple Part
 *
 *   Change History (most recent first):
 *
 *     137691   11/28/95   ced  Fix up exception handling and use exception safe tempobjs
 *     143687   11/27/95   aml  Fix printing bug: background not printed on second page
 *     144744   11/22/95   ced  Remove unnessecary frame->SetPartInfo calls
 *     143654   11/13/95   ced  Apple DR4 IDL changes; new param added to ODWindowState::RegisterWindow
 *     143420   11/11/95   st   use cmddefs.xh not odmenuid.h
 *     123247   09/21/95   jso  Added Category User String
 *     128947   07/25/95   st   Open as window when double click received
 *     128305   07/12/95   map  use new OD.h #defines for INCL_ODxxx
 *     128305   07/07/95   st   put in samples for adding menu items to popups
 *     117197   06/22/95   BLG  open from file in some position/properties as was saved
 *     123260   05/26/95   st   More popup support
 *     123149   05/23/95   ced  Activate on WM_BUTTON1CLICK instead of BUTTON1DOWN.
 *                              Invalidate facet in HighlightChanged
 *     123163   05/23/95   st   added popup menu support
 *     122943   05/21/95   map  Multi-threading name changes
 *     121968   05/11/95   jso  Updated CloneInto to check for existing property
 *     121993   05/11/95   ced  use fIsInitialized flag instead of somSelf->IsInitialized()
 *                              to better support subclassing.  Add fPartWrapper attrib.
 *     119388   04/29/95   st   added menu handling
 *     120025   04/22/95   ced  Fix 'ternalization of activation state.
 *     120017   04/22/95   ced  Added code to keep list of display frames and
 *                              provide CreateDisplayFramesIterator method for
 *                              derived classes.
 *     119471   04/18/95   pfe  added changes for open as window (part window)
 *
 *     117472   04/17/95   ced  Add overridable AllocFramePartInfo method to
 *                              allow derived classes to subclass PartInfoRec.
 *     117544   04/03/95   map  replaced true/false with kODTrue/kODFalse
 *
 *   To Do:
 *
 *   Copyright: (c) 1993-1994 by IBM Corp., all rights reserved.
 *
 */

/*
 *  This file was generated by the SOM Compiler and Emitter Framework.
 *  Generated using:
 *      SOM Emitter emitxtm: 2.38
 */

#ifndef _ALTPOINT_
#include "AltPoint.h"
#endif

#ifndef _EXCEPT_
#include "Except.h"
#endif

#ifndef SOM_Module_simplprt_Source
#define SOM_Module_simplprt_Source
#endif
#define SimplePart_Class_Source
#define VARIABLE_MACROS
#include "SimplPrt.xih"

#define INCL_GPICONTROL
#define INCL_GPIPRIMITIVES
#define INCL_GPIREGIONS
#define INCL_GPITRANSFORMS
#define INCL_WININPUT
#define INCL_WINSTDDRAG
#define INCL_WINMENUS
#define INCL_DOSMODULEMGR
#define INCL_DOSRESOURCES // Ajay

#define INCL_ODAPI
#define INCL_ODARBITRATOR
#define INCL_ODCANVAS
#define INCL_ODDRAGANDDROP
#define INCL_ODDRAFT
#define INCL_ODERRORS
#define INCL_ODFACET
#define INCL_ODFOCUSSET
#define INCL_ODFRAME
#define INCL_ODINFO
#define INCL_ODSHAPE
//#define INCL_ODSEMANTICINTERFACE
#define INCL_ODSESSION
#define INCL_ODSTORAGEUNIT
#define INCL_ODSTORAGEUNITVIEW
#define INCL_ODTRANSFORM
#define INCL_ODUI
#define INCL_ODUNDO
#define INCL_ODWINDOW
#define INCL_ODWINDOWSTATE
#include <os2.h>


#ifndef _FOCUSLIB_
#include "focuslib.h"
#endif

#ifndef _ODMATH_
#include "ODMath.h"
#endif

#ifndef _TEMPOBJ_
#include "TempObj.h"
#endif

#ifndef _ODUTILS_
#include "ODUtils.h"
#endif

#ifndef _WINUTILS_
   #include "winutils.h"
#endif

#ifndef _ORDCOLL_
#include "OrdColl.h"
#endif

#include <string.h>

#ifndef _STDTYPIO_
#include "stdtypio.h"
#endif

#define YGRID 32
#define XGRID 32


static const ODPropertyName  kPropFrameInfo = "+//ISO 9070/ANSI::113722::US::CI LABS::IBM:SimplePart:Property:FrameInfo";
static const ODPropertyName  kPropMouseDownOffset = "+//ISO 9070/ANSI::113722::US::CI LABS::IBM:SimplePart:Property:MouseDownOffset";

// todo: The following entry almost certainly needs to be placed in a public location
static const ODValueType    kOS2POINTL = "OS2:Type:POINTL";

const ODType   kSimplePartPresNormal  = "SimplePart:Presentation:Normal";
const ODType   kSimplePartPresPalette = "SimplePart:Presentation:Palette";
const ODType   kSimplePartKind            = "+//ISO 9070/ANSI::113722::US::CI LABS::IBM:Kind:SimplePart";
const ODType   kSimplePartKindDisplayName = "Simple Part Kind";
const ODType   kPartHandlerName         =  "SimplePart";
const ODType   kSimplePartCategory         =  "OpenDoc:Category:Sample";

// The following properties are defined for View->Details handling. It is just a TEST.
// You can find the same #defines in cntnrprt.cpp as well.
static const ODPropertyName  kSimplePartAddProps = "+//ISO 9070/ANSI::113722::US::CI LABS::IBM:SimplePart:Property:AddProps";
const ODType   kSimplePartAddProp1         =  "+//ISO 9070/ANSI::113722::US::CI LABS::IBM:SimplePart:Test AddProp1";
const ODType   kSimplePartAddProp2         =  "+//ISO 9070/ANSI::113722::US::CI LABS::IBM:SimplePart:Test AddProp2";
const ODType   kSimplePartAddProp3         =  "+//ISO 9070/ANSI::113722::US::CI LABS::IBM:SimplePart:Test AddProp3";
const ODType   kSimplePartAddProp4         =  "+//ISO 9070/ANSI::113722::US::CI LABS::IBM:SimplePart:Test AddProp4"; // Ajay

const ODCommandID cODColor = 2000;
const ODCommandID cODGray = 2001;
const ODCommandID cODRed = 2002;
const ODCommandID cODGreen = 2003;
const ODCommandID cODYellow = 2004;
const ODCommandID cODBlue = 2005;
const ODCommandID cODMagenta = 2006;
const ODCommandID cODCyan = 2007;
const ODCommandID cODWhite = 2008;
const ODCommandID cODOtherColor = 2009;


// SetBGColorRec is used for Undo/Redo.
struct SetBGColorRec
{
  SetBGColorRec(RGBColor oldColor, RGBColor newColor, ODFrame* frame)
          {_fOldColor = oldColor; _fNewColor = newColor;
            _fFrame = frame;}
  RGBColor   _fOldColor;
  RGBColor   _fNewColor;
  ODFrame*  _fFrame;
};


SOM_Scope PartInfoRec* SOMLINK SimplePartAllocFramePartInfo(SimplePart *somSelf,
                                                          Environment *ev)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartAllocFramePartInfo");

    PartInfoRec* pInfo = new PartInfoRec;
    return pInfo;
}

SOM_Scope ODxOrderedCollectionIterator* SOMLINK SimplePartCreateDisplayFramesIterator(SimplePart *somSelf,
                                                Environment *ev)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartCreateDisplayFramesIterator");

    ODxOrderedCollectionIterator* pIter = new ODxOrderedCollectionIterator(_fDisplayFrames);
    return pIter;
}
SOM_Scope ODSemanticInterface*  SOMLINK SimplePartGetSemanticInterface(SimplePart *somSelf,
                                                                        Environment *ev)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartGetSemanticInterface");

    return (ODSemanticInterface *) 0;
}

SOM_Scope void  SOMLINK SimplePartCommonInitSimplePart(SimplePart *somSelf,
                                                        Environment *ev)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartCommonInitSimplePart");

   SOM_TRY

   _fDisplayFrames = new ODxOrderedCollection;
   _fSession = somSelf->GetStorageUnit(ev)->GetSession(ev);
   _fSelectionFocus = _fSession->Tokenize(ev, kODSelectionFocus);
   _fMenuFocus = _fSession->Tokenize(ev, kODMenuFocus);
   _fKeyFocus = _fSession->Tokenize(ev, kODKeyFocus);
    _fFocusSet = _fSession->GetArbitrator(ev)->CreateFocusSet(ev);
   _fFocusSet->Add(ev, _fSelectionFocus);
   _fFocusSet->Add(ev, _fMenuFocus);
   _fFocusSet->Add(ev, _fKeyFocus);


     _fMenuBar = _fSession->GetWindowState(ev)->CopyBaseMenuBar(ev);
      // It is required that parts instantiate their menu bars from
      // the base OpenDoc menu bar. This maintains consistency in the
      // default menu items and their placement.
      // Since the object is a copy, we can add and subtract menus and
      // items without affecting other running parts.
    if ( _fMenuBar ){    // crs - b1c16
       _fPopup = _fSession->GetWindowState(ev)->CopyBasePopup(ev);
       somSelf->InstallMenus(ev);
    }

   SOM_CATCH_ALL
   SOM_ENDTRY
}

SOM_Scope ODBoolean  SOMLINK SimplePartHandleMouseDown(SimplePart *somSelf,
                                                        Environment *ev,
                                                       ODFacet* facet,
                                                       ODPoint* where,
                                                       ODEventData* event)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartHandleMouseDown");

    SOM_TRY

    somSelf->Activate(ev, facet);

    SOM_CATCH_ALL
    SOM_ENDTRY

    return kODTrue;
}

SOM_Scope void  SOMLINK SimplePartMoveResize(SimplePart *somSelf,
                                              Environment *ev,
                                             ODFacet* facet,
                                             Proxy* selection,
                                             ODSLong fs)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartMoveResize");


}

SOM_Scope ODBoolean  SOMLINK SimplePartHandleMouseDownDrag(SimplePart *somSelf,
                                                            Environment *ev,
                                                           ODFacet* facet,
                                                           Proxy* selection,
                                                           ODEventData* event)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartHandleMouseDownDrag");

    return kODFalse;
}

SOM_Scope ODBoolean  SOMLINK SimplePartHandleMouseDownEdgeResize(SimplePart *somSelf,
                                                                  Environment *ev,
                                                                 ODFacet* facet,
                                                                 Proxy* selection,
                                                                 POINTL* mouse)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartHandleMouseDownEdgeResize");

    return kODFalse;
}

SOM_Scope ODBoolean  SOMLINK SimplePartHandleMouseDownCornerResize(SimplePart *somSelf,
                                                                    Environment *ev,
                                                                   ODFacet* facet,
                                                                   Proxy* selection,
                                                                   POINTL* mouse)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartHandleMouseDownCornerResize");

    return kODFalse;
}

SOM_Scope ODBoolean  SOMLINK SimplePartHandleKeyDown(SimplePart *somSelf,
                                                      Environment *ev,
                                                     ODFrame* focusFrame,
                                                     ODEventData* event)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartHandleKeyDown");

    DosBeep(200,30);
    return kODTrue;
}

SOM_Scope ODBoolean  SOMLINK SimplePartHandleMenuEvent(SimplePart *somSelf,
                                                        Environment *ev,
                                                       ODFrame* focusFrame,
                                                       ODEventData* event)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartHandleMenuEvent");

    ODBoolean handled = kODFalse;

    SOM_TRY

    ODCommandID command = LONGFROMMP(event->mp1);


    switch (command)
    {
         case VIEW_PROPERTIES:
              {
                //not completely done yet.....
                ODFrameFacetIterator* facets = focusFrame->CreateFacetIterator(ev);
                _fSession->GetInfo(ev)->ShowPartFrameInfo(ev,facets->First(ev), kODFalse);
                delete facets;
                handled = kODTrue;
              }
              break;

       case VIEW_OAWINDOW:
              {
              somSelf->Open(ev, focusFrame);
              handled = kODTrue;
              }
              break;
       default:
          break;
    }

    SOM_CATCH_ALL
    SOM_ENDTRY

    return handled;

}

SOM_Scope ODBoolean  SOMLINK SimplePartHandleMouseMove(SimplePart *somSelf,
                                                        Environment *ev,
                                                       ODFacet* facet,
                                                       ODPoint* where,
                                                       ODEventData* event)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartHandleMouseMove");

    return kODTrue;
}


SOM_Scope void  SOMLINK SimplePartActivateFrame(SimplePart *somSelf,
                                                 Environment *ev,
                                                ODFrame* frame)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartActivateFrame");

    SOM_TRY

    if (frame != kODNULL) {

      ODBoolean succeeded = kODFalse;
  
      succeeded = _fSession->GetArbitrator(ev)->RequestFocusSet(ev, _fFocusSet,frame);
  
      if (succeeded)
      {
         somSelf->FocusAcquired(ev, _fSelectionFocus, frame);
         somSelf->FocusAcquired(ev, _fMenuFocus, frame);
         somSelf->FocusAcquired(ev, _fKeyFocus, frame);
      }
    }

    SOM_CATCH_ALL
    SOM_ENDTRY
}

SOM_Scope void  SOMLINK SimplePartDeActivateFrame(SimplePart *somSelf,
                                                   Environment *ev,
                                                  ODFrame* frame)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartDeActivateFrame");

    SOM_TRY

    if (frame != kODNULL) {
       _fSession->GetArbitrator(ev)->RelinquishFocusSet(ev, _fFocusSet,frame);
       somSelf->FocusLost(ev, _fSelectionFocus, frame);
       somSelf->FocusLost(ev, _fMenuFocus, frame);
       somSelf->FocusLost(ev, _fKeyFocus, frame);
    }

    SOM_CATCH_ALL
    SOM_ENDTRY
}

SOM_Scope void  SOMLINK SimplePartActivatingWindow(SimplePart *somSelf,
                                                    Environment *ev,
                                                   ODFrame* frame)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartActivatingWindow");

    SOM_TRY

    PartInfoRec* pInfo = (PartInfoRec*) frame->GetPartInfo(ev);
    if (pInfo->fNeedsActivating)
    {
       somSelf->ActivateFrame(ev, frame);
       pInfo->fNeedsActivating = kODFalse;
    }

    SOM_CATCH_ALL
    SOM_ENDTRY

}

SOM_Scope void  SOMLINK SimplePartDeActivatingWindow(SimplePart *somSelf,
                                                      Environment *ev,
                                                     ODFrame* frame)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartDeActivatingWindow");

    SOM_TRY

    PartInfoRec* pInfo = (PartInfoRec*) frame->GetPartInfo(ev);
    TempODFrame tempFrame = _fSession->GetArbitrator(ev)->AcquireFocusOwner(ev, _fSelectionFocus);
    if (frame == tempFrame)
    {
       if (!pInfo->fNeedsActivating)
       {
          pInfo->fNeedsActivating = kODTrue;
       }
    }
    else
    {
       if (pInfo->fNeedsActivating)
       {
          pInfo->fNeedsActivating = kODFalse;
       }
    }

    SOM_CATCH_ALL
    SOM_ENDTRY

}


SOM_Scope void  SOMLINK SimplePartUserSetBGColor(SimplePart *somSelf,
                                                  Environment *ev,
                                                 ODFrame* frame,
                                                 RGBColor whichColor)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartUserSetBGColor");

    SOM_TRY

#ifdef NOT_YET
    if (whichColor != _fContentStruct.fColor)
    {
      somSelf->SetBGColor(ev, frame, whichColor);
    }
#endif

    SOM_CATCH_ALL
    SOM_ENDTRY
}

SOM_Scope void  SOMLINK SimplePartSetBGColor(SimplePart *somSelf,
                                              Environment *ev,
                                             ODFrame* aFrame,
                                             ODUShort whichColor)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartSetBGColor");

   SOM_TRY

#ifdef NOT_YET

   RGBColor newColor = _fContentStruct.fColor;

   switch (whichColor)
   {
      break;
      case  cODGray:    newColor = 7 % 8;     break;
      case  cODRed:     newColor = 6 % 8;     break;
      case  cODGreen:   newColor = 5 % 8;     break;
      case  cODYellow:  newColor = 4 % 8;     break;
      case  cODBlue:    newColor = 3 % 8;     break;
      case  cODMagenta: newColor = 2 % 8;     break;
      case  cODCyan:    newColor = 1 % 8;     break;
      case  cODWhite:   newColor = 0 % 8;     break;
      default: break;
   }
   somSelf->UserSetBGColor(ev, aFrame,newColor);
#endif

   SOM_CATCH_ALL
   SOM_ENDTRY
}

SOM_Scope ODWindow*  SOMLINK SimplePartCreateWindow(SimplePart *somSelf,
                                                     Environment *ev,
                                                    ODFrame* sourceFrame)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartCreateWindow");

    ODWindow* window = kODNULL;

    SOM_TRY

    Rect windRect;
    ODPlatformWindow platformWindow = kODNULL;

    if (sourceFrame && !sourceFrame->IsRoot(ev)) {
       SWP swp;
       swp.x = 100;
       swp.y = 100;
       swp.cx = 400;
       swp.cy = 400;
       platformWindow = _fSession->CreatePlatformWindow(ev, ODPlatformWindowDefaultCreateOptions | FCF_HORZSCROLL | FCF_VERTSCROLL);
       WinSetWindowPos(platformWindow, HWND_TOP,
                       swp.x, swp.y, swp.cx, swp.cy,
                       SWP_SIZE | SWP_MOVE);

     } else {
       platformWindow = _fSession->CreatePlatformWindow(ev, ODPlatformWindowDefaultCreateOptions);
    } /* endif */
    window =  _fSession->GetWindowState(ev)->
          RegisterWindow(ev, platformWindow,
                kODFrameObject,
                (sourceFrame==kODNULL),  // is root
                kODTrue,      // Is resizable
                kODFalse,      // Is floating
                kODTrue,      // should save
                kODTrue,      // should dispose
                _fPartWrapper,
                _fSession->Tokenize(ev, kODViewAsFrame),
                _fSession->Tokenize(ev, kODPresDefault),
                sourceFrame);

    SOM_CATCH_ALL
    SOM_ENDTRY

    return window;
}

SOM_Scope RGBColor  SOMLINK SimplePartGetDefaultColor(SimplePart *somSelf,
                                                       Environment *ev)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartGetDefaultColor");

    return ( _fContentStruct.fColor );
}

SOM_Scope void  SOMLINK SimplePartSetDefaultColor(SimplePart *somSelf,
                                                   Environment *ev,
                                                  RGBColor color)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartSetDefaultColor");

    _fContentStruct.fColor = color;
}

SOM_Scope void  SOMLINK SimplePartInstallMenus(SimplePart *somSelf,
                                                Environment *ev)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartInstallMenus");

    SOM_TRY

    ODPlatformMenuItem mi;
    ODPlatformMenuItem mi2;

    memset((PCH)&mi, 0, sizeof(MENUITEM));
    memset((PCH)&mi2,0, sizeof(MENUITEM));

    _fPopup->RemoveMenuItem(ev, kODNULL, VIEW_OAICON);
    _fPopup->RemoveMenuItem(ev, kODNULL, VIEW_OATREE);
    _fPopup->RemoveMenuItem(ev, kODNULL, VIEW_OADETAILS);

    SOM_CATCH_ALL
    SOM_ENDTRY
}

SOM_Scope void  SOMLINK SimplePartsomInit(SimplePart *somSelf)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartsomInit");

    SimplePart_parent_ODPart_somInit(somSelf);

    _fFrameGroupIDCounter = 1;

    _fPartWrapper = kODNULL;

    _fContents = kODNULL;

    _fFocusSet = kODNULL;

    _fSemtIntf = kODNULL;

    _fSession = kODNULL;

    _fTestDrawSU = kODNULL;

    _fDisplayFrames = 0;
    _fIsInitialized = kODFalse;
    _fMenuBar = kODNULL;
    _fPopup = kODNULL;
    memset(&_fContentStruct, 0, sizeof(_fContentStruct));
}

SOM_Scope void  SOMLINK SimplePartsomUninit(SimplePart *somSelf)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartsomUninit");


    #define SEMANTIC_INTERFACES_NOT_DONE
    #ifndef SEMANTIC_INTERFACES_NOT_DONE
       if (_fSemtIntf != kODNULL)
           delete _fSemtIntf;
    #endif

    if (_fDisplayFrames != kODNULL)
      delete _fDisplayFrames;    // make sure it's empty first

    Environment * ev = somGetGlobalEnvironment();

    SOM_TRY

    ODReleaseObject(ev,_fTestDrawSU);
    SimplePart_parent_ODPart_somUninit(somSelf);

    SOM_CATCH_ALL
    SOM_ENDTRY
}

SOM_Scope void  SOMLINK SimplePartFulfillPromise(SimplePart *somSelf,
                                                  Environment *ev,
                                                 ODStorageUnitView* promiseSUView)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartFulfillPromise");

}

SOM_Scope void  SOMLINK SimplePartDropCompleted(SimplePart *somSelf,
                                                 Environment *ev,
                                                ODPart* destPart,
                                                ODDropResult dropResult)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartDropCompleted");

}

SOM_Scope MRESULT  SOMLINK SimplePartDragEnter(SimplePart *somSelf,
                                                Environment *ev,
                                               ODDragItemIterator* dragInfo,
                                               ODFacet* facet,
                                               ODPoint* where)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartDragEnter");


    return MRFROM2SHORT (DOR_NEVERDROP, DO_UNKNOWN);

}

SOM_Scope MRESULT  SOMLINK SimplePartDragWithin(SimplePart *somSelf,
                                                 Environment *ev,
                                                ODDragItemIterator* dragInfo,
                                                ODFacet* facet,
                                                ODPoint* where)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartDragWithin");

    return MRFROM2SHORT (DOR_NEVERDROP, DO_UNKNOWN);
}

SOM_Scope void  SOMLINK SimplePartDragLeave(SimplePart *somSelf,
                                             Environment *ev,
                                            ODFacet* facet, ODPoint* where)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartDragLeave");

}

SOM_Scope ODDropResult  SOMLINK SimplePartDrop(SimplePart *somSelf,
                                                Environment *ev,
                                               ODDragItemIterator* dropInfo,
                                               ODFacet* facet,
                                               ODPoint* where)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartDrop");

    return kODDropFail;


}

SOM_Scope void  SOMLINK SimplePartContainingPartPropertiesUpdated(SimplePart *somSelf,
                                                                   Environment *ev,
                                                                  ODFrame* frame,
                                                                  ODStorageUnit* propertyUnit)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartContainingPartPropertiesUpdated");


}

SOM_Scope ODStorageUnit*  SOMLINK SimplePartAcquireContainingPartProperties(SimplePart *somSelf,
                                                                         Environment *ev,
                                                                        ODFrame* frame)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartAcquireContainingPartProperties");


    // this part has no properties to return
    return kODNULL;

}

SOM_Scope ODBoolean  SOMLINK SimplePartRevealFrame(SimplePart *somSelf,
                                               Environment *ev,
                                              ODFrame* embeddedFrame,
                                              ODShape* revealShape)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartRevealFrame");
    return kODFalse;
}

SOM_Scope void  SOMLINK SimplePartEmbeddedFrameSpec(SimplePart *somSelf,
                                                     Environment *ev,
                                                    ODFrame* embeddedFrame,
                                                    ODObjectSpec* spec)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartEmbeddedFrameSpec");

}

SOM_Scope ODEmbeddedFramesIterator*  SOMLINK SimplePartCreateEmbeddedFramesIterator(SimplePart *somSelf,
                                                                                     Environment *ev,
                                                                                    ODFrame* frame)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartCreateEmbeddedFramesIterator");
//  The following line has been commented out since we want this part
//  to return null.
//    THROW(kODErrCannotEmbed);
    return (ODEmbeddedFramesIterator *) kODNULL;
}

SOM_Scope void  SOMLINK SimplePartDisplayFrameAdded(SimplePart *somSelf,
                                                   Environment *ev,
                                                  ODFrame* frame)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartDisplayFrameAdded");

   SOM_TRY

    _fDisplayFrames->AddLast(frame);
    frame->Acquire(ev);

   PartInfoRec* pInfo = (PartInfoRec*)frame->GetPartInfo(ev);
   if (!pInfo)
   {
      pInfo = somSelf->AllocFramePartInfo(ev);
      if (frame->IsRoot(ev))
        pInfo->fNeedsActivating = kODTrue;

      frame->SetPartInfo(ev, (ODInfoType) pInfo);
   }

   SOM_CATCH_ALL
   SOM_ENDTRY
}

SOM_Scope void  SOMLINK SimplePartDisplayFrameConnected(SimplePart *somSelf,
                                                   Environment *ev,
                                                  ODFrame* frame)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartDisplayFrameConnected");

   SOM_TRY

    _fDisplayFrames->AddLast(frame);
    frame->Acquire(ev);

   PartInfoRec* pInfo = (PartInfoRec*)frame->GetPartInfo(ev);
   if (!pInfo)
   {
      pInfo = somSelf->AllocFramePartInfo(ev);
      if (frame->IsRoot(ev))
         pInfo->fNeedsActivating = kODTrue;
      frame->SetPartInfo(ev, (ODInfoType) pInfo);
   }

   SOM_CATCH_ALL
   SOM_ENDTRY

}

SOM_Scope void  SOMLINK SimplePartAttachSourceFrame(SimplePart *somSelf,
                                                     Environment *ev,
                                                    ODFrame* frame,
                                                    ODFrame* sourceFrame)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartAttachSourceFrame");

}

SOM_Scope void  SOMLINK SimplePartDisplayFrameRemoved(SimplePart *somSelf,
                                                      Environment *ev,
                                                     ODFrame* frame)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartDisplayFrameRemoved");

   SOM_TRY

    if (frame  != kODNULL)
    {
       if (_fDisplayFrames->Contains(frame))
       {
          _fSession->GetArbitrator(ev)->RelinquishFocusSet(ev, _fFocusSet,frame );

          PartInfoRec* pInfo = (PartInfoRec*) frame ->GetPartInfo(ev);
          frame ->SetPartInfo(ev, (ODInfoType) kODNULL);
          delete pInfo;

          _fDisplayFrames->Remove(frame);
          ODReleaseObject(ev, frame);
       }
       else
          THROW(kODErrInvalidFrame);
    }

   SOM_CATCH_ALL
   SOM_ENDTRY
}

SOM_Scope void  SOMLINK SimplePartDisplayFrameClosed(SimplePart *somSelf,
                                                     Environment *ev,
                                                    ODFrame* frame)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartDisplayFrameClosed");

   SOM_TRY

    if (frame  != kODNULL)
    {
       if (_fDisplayFrames->Contains(frame))
       {
          _fSession->GetArbitrator(ev)->RelinquishFocusSet(ev, _fFocusSet,frame );

          PartInfoRec* pInfo = (PartInfoRec*) frame ->GetPartInfo(ev);
          delete pInfo;

          _fDisplayFrames->Remove(frame);
          ODReleaseObject(ev, frame);
       }
       else
          THROW(kODErrInvalidFrame);
    }

   SOM_CATCH_ALL
   SOM_ENDTRY

}

SOM_Scope void  SOMLINK SimplePartFrameShapeChanged(SimplePart *somSelf,
                                                     Environment *ev,
                                                    ODFrame* frame)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartFrameShapeChanged");

}

SOM_Scope void  SOMLINK SimplePartViewTypeChanged(SimplePart *somSelf,
                                                   Environment *ev,
                                                  ODFrame* frame)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartViewTypeChanged");
}

SOM_Scope void  SOMLINK SimplePartPresentationChanged(SimplePart *somSelf,
                                                       Environment *ev,
                                                      ODFrame* frame)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartPresentationChanged");

}

SOM_Scope void  SOMLINK SimplePartSequenceChanged(SimplePart *somSelf,
                                                   Environment *ev,
                                                  ODFrame* frame)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartSequenceChanged");
}

SOM_Scope void  SOMLINK SimplePartWritePartInfo(SimplePart *somSelf,
                                                 Environment *ev,
                                                ODInfoType partInfo,
                                                ODStorageUnitView* storageUnitView)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartWritePartInfo");

}
SOM_Scope ODInfoType  SOMLINK SimplePartReadPartInfo(SimplePart *somSelf, Environment *ev,
    ODFrame* frame,
    ODStorageUnitView* storageUnitView)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartReadPartInfo");

    return ((ODInfoType)kODNULL);

}

SOM_Scope void  SOMLINK SimplePartClonePartInfo(SimplePart *somSelf, Environment *ev,
    ODDraftKey key,
    ODInfoType partInfo,
    ODStorageUnitView* storageUnitView,
    ODFrame* scopeFrame)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartClonePartInfo");

}
SOM_Scope ODID  SOMLINK SimplePartOpen(SimplePart *somSelf,  Environment *ev,
                                       ODFrame* frame)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartOpen");


    ODID windowID = 0;

   SOM_TRY

    TempODWindow window = kODNULL;

    if (frame) // Doing a View As Window or Open Root
    {
        if (frame->IsRoot(ev))  // Create Window For Root Frame
        {
                WindowProperties props;
                BeginGetWindowProperties(ev, frame, &props);

         ODULong flCreateFlags = props.createFlags ? props.createFlags :
                                                       ODPlatformWindowDefaultCreateOptions;

         HWND hwndFrame = _fSession->CreatePlatformWindow(ev, flCreateFlags);
         // position the window to shape it was closed in -? ben garrett
         // defect 117197 open from file in some position/properties as was saved
         WinSetWindowPos(hwndFrame, HWND_TOP, props.boundsRect.xLeft,
                                           props.boundsRect.yBottom,
                                           props.boundsRect.xRight,
                                           props.boundsRect.yTop,(SWP_SIZE | SWP_MOVE|props.swpFlags ));
         // defect 117197 end code added

                window =  _fSession->GetWindowState(ev)->RegisterWindowForFrame(ev, hwndFrame,
                                                                                                                frame,
                                                                                                                 props.isRootWindow,    // Keeps draft open
                                                                                                                 kODTrue,       // Is resizable
                                                                                                                 kODFalse,      // Is floating
                                                                                                                kODTrue,        // should save
                                                                                                                kODTrue,        // should dispose
                                                                                                                props.sourceFrame);
                EndGetWindowProperties(ev, &props); // Release source frame
                window->Open(ev);
                window->Show(ev);
        }
        else    // View In Window
      {
        window = _fSession->GetWindowState(ev)->AcquireWindow(ev, windowID);
        if (window)
          window->Select(ev);
        else
        {
          window = somSelf->CreateWindow(ev, frame);
          windowID = window->GetID(ev);
          window->Open(ev);
          window->Show(ev);
          window->Select(ev);
        }
      }
    }
    else
    {
      window = somSelf->CreateWindow(ev, frame);
      windowID = window->GetID(ev);
      window->Open(ev);
      window->Show(ev);
      window->Select(ev);
    }

   SOM_CATCH_ALL
   SOM_ENDTRY

   return windowID;
}

SOM_Scope ODFrame*  SOMLINK SimplePartRequestEmbeddedFrame(SimplePart *somSelf,
                                                            Environment *ev,
                                                           ODFrame* containingFrame,
                                                           ODFrame* baseFrame,
                                                           ODShape* frameShape,
                                                           ODPart* embedPart,
                                                           ODTypeToken viewType,
                                                           ODTypeToken presentation,
                                                           ODBoolean isOverlaid)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartRequestEmbeddedFrame");
    return baseFrame;
}

SOM_Scope void  SOMLINK SimplePartRemoveEmbeddedFrame(SimplePart *somSelf,
                                                       Environment *ev,
                                                      ODFrame* embeddedFrame)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartRemoveEmbeddedFrame");

}

SOM_Scope ODShape*  SOMLINK SimplePartRequestFrameShape(SimplePart *somSelf,
                                                         Environment *ev,
                                                        ODFrame* embeddedFrame,
                                                        ODShape* frameShape)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartRequestFrameShape");

    return frameShape;
}
SOM_Scope void  SOMLINK SimplePartUsedShapeChanged(SimplePart *somSelf,
                                                    Environment *ev,
                                                   ODFrame* embeddedFrame)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartUsedShapeChanged");

}

SOM_Scope ODShape*  SOMLINK SimplePartAdjustBorderShape(SimplePart *somSelf,
                                                         Environment *ev,
                                                        ODFacet* embeddedFacet,
                                                        ODShape* shape)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartAdjustBorderShape");

   SOM_TRY

    if ( shape == kODNULL )
      return kODNULL;
    shape->Acquire(ev); // [123773]

   SOM_CATCH_ALL
   SOM_ENDTRY

    return shape;
}

SOM_Scope void  SOMLINK SimplePartFacetAdded(SimplePart *somSelf,
                                              Environment *ev,
                                             ODFacet* facet)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartFacetAdded");

}

SOM_Scope void  SOMLINK SimplePartFacetRemoved(SimplePart *somSelf,
                                                Environment *ev,
                                               ODFacet* facet)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartFacetRemoved");

}

SOM_Scope void  SOMLINK SimplePartCanvasChanged(SimplePart *somSelf,
                                                 Environment *ev,
                                                ODFacet* facet)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartCanvasChanged");

}

SOM_Scope void  SOMLINK SimplePartGeometryChanged(SimplePart *somSelf,
                                                   Environment *ev,
    ODFacet* facet, ODBoolean clipShapeChanged, ODBoolean externalTransformChanged)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartGeometryChanged");

}

SOM_Scope void  SOMLINK SimplePartDraw(SimplePart *somSelf,  Environment *ev,
                                       ODFacet* facet, ODShape* invalidShape)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartDraw");

   SOM_TRY

    HPS hpsDraw;
    ODRect rect;
    TempODShape tempShape = facet->GetFrame(ev)->AcquireFrameShape(ev, kODNULL);
    tempShape->GetBoundingBox(ev, &rect);
    RECTL frameRect;
    rect.AsRECTL(frameRect);

    CFocus f(ev, facet, invalidShape, &hpsDraw);     // Set up drawing environment

    GpiSetColor(hpsDraw, _fContentStruct.fColor);
    POINTL orig = {0, 0};
    GpiMove(hpsDraw, &orig);  // aml - [143687] background not printed on second page
    POINTL ptl = {frameRect.xRight, frameRect.yTop};
    GpiBox(hpsDraw, DRO_FILL, &ptl, 0, 0);

    GpiSetLineType(hpsDraw, LINETYPE_DASHDOUBLEDOT);
    GpiSetColor(hpsDraw, CLR_BLACK);

    for (int y = 0; y < frameRect.yTop; y += YGRID) {
       ptl.y = y;
       ptl.x = 0;
       GpiMove(hpsDraw, &ptl);
       ptl.x = frameRect.xRight;
       ptl.y += frameRect.xRight;
       GpiLine(hpsDraw, &ptl);
    }

    for (int x = XGRID; x < frameRect.xRight; x += XGRID) {
       ptl.x = x;
       ptl.y = 0;
       GpiMove(hpsDraw, &ptl);
       ptl.x += frameRect.yTop;
       ptl.y = frameRect.yTop;
       GpiLine(hpsDraw, &ptl);
    }

   SOM_CATCH_ALL
   SOM_ENDTRY
}

SOM_Scope void  SOMLINK SimplePartCanvasUpdated(SimplePart *somSelf,
                                                 Environment *ev,
                                                ODCanvas* canvas)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartCanvasUpdated");

}

SOM_Scope void  SOMLINK SimplePartHighlightChanged(SimplePart *somSelf,
                                                    Environment *ev,
                                                   ODFacet* facet)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartHighlightChanged");

   SOM_TRY

    /*
     * cause ourselves to be redrawn.  FocusLib will take care of setting the
     * default mix mode so that we paint properly.
     */
    facet->Invalidate(ev, kODNULL, kODNULL);

   SOM_CATCH_ALL
   SOM_ENDTRY
}


SOM_Scope ODLinkSource*  SOMLINK SimplePartCreateLink(SimplePart *somSelf,
                                                 Environment *ev,
                                                ODByteArray* data)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartCreateLink");

    return 0;

}

SOM_Scope void  SOMLINK SimplePartLinkUpdated(SimplePart *somSelf,
                                               Environment *ev,
                                              ODLink* updatedLink,
                                              ODUpdateID id)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartLinkUpdated");

}

SOM_Scope void  SOMLINK SimplePartRevealLink(SimplePart *somSelf,
                                              Environment *ev,
                                             ODLinkSource* linkSource)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartRevealLink");

}

SOM_Scope void  SOMLINK SimplePartBreakLink(SimplePart *somSelf,
                                               Environment *ev,
                                              ODLink* link)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartBreakLink");

}

SOM_Scope void  SOMLINK SimplePartBreakLinkSource(SimplePart *somSelf,
                                                     Environment *ev,
                                                    ODLinkSource* linkSource)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartBreakLinkSource");

}

SOM_Scope void  SOMLINK SimplePartLinkBroken(SimplePart *somSelf,
                                                Environment *ev,
                                               ODLink* link)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartLinkBroken");

}

SOM_Scope void  SOMLINK SimplePartUpdateFromLinkSource(SimplePart *somSelf,
                                                          Environment *ev,
                                                         ODLinkSource* linkSource)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartUpdateFromLinkSource");

}

SOM_Scope void  SOMLINK SimplePartShowLink(SimplePart *somSelf,
                                              Environment *ev,
                                             ODLink* link)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartShowLink");

}

SOM_Scope void  SOMLINK SimplePartEmbeddedFrameUpdated(SimplePart *somSelf,
                                                        Environment *ev,
                                                       ODFrame* frame,
                                                       ODUpdateID change)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartEmbeddedFrameUpdated");

}

SOM_Scope void  SOMLINK SimplePartLinkStatusChanged(SimplePart *somSelf,
                                                     Environment *ev,
                                                    ODFrame* frame)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartLinkStatusChanged");

}

SOM_Scope ODBoolean  SOMLINK SimplePartBeginRelinquishFocus(SimplePart *somSelf,
                                                             Environment *ev,
                                                            ODTypeToken focus,
                                                            ODFrame* ownerFrame,
                                                            ODFrame* proposedFrame)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartBeginRelinquishFocus");


    return kODTrue;
}

SOM_Scope void  SOMLINK SimplePartCommitRelinquishFocus(SimplePart *somSelf,
                                                         Environment *ev,
                                                        ODTypeToken focus,
                                                        ODFrame* ownerFrame,
                                                        ODFrame* proposedFrame)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartCommitRelinquishFocus");

   SOM_TRY

    somSelf->FocusLost(ev, focus, ownerFrame);

   SOM_CATCH_ALL
   SOM_ENDTRY
}

SOM_Scope void  SOMLINK SimplePartAbortRelinquishFocus(SimplePart *somSelf,
                                                        Environment *ev,
                                                       ODTypeToken focus,
                                                       ODFrame* ownerFrame,
                                                       ODFrame* proposedFrame)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartAbortRelinquishFocus");

}

SOM_Scope void  SOMLINK SimplePartFocusAcquired(SimplePart *somSelf,
                                                 Environment *ev,
                                                ODTypeToken focus,
                                                ODFrame* ownerFrame)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartFocusAcquired");

   SOM_TRY

    if (focus == _fSelectionFocus)
    {
      PartInfoRec* pInfo = (PartInfoRec*) ownerFrame->GetPartInfo(ev);
      pInfo->fIsActive = kODTrue;
    } else if (focus == _fMenuFocus) {
         _fMenuBar->Display(ev);
    }

   SOM_CATCH_ALL
   SOM_ENDTRY

}

SOM_Scope void  SOMLINK SimplePartFocusLost(SimplePart *somSelf,
                                             Environment *ev,
                                            ODTypeToken focus,
                                            ODFrame* ownerFrame)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartFocusLost");

   SOM_TRY

    if (focus == _fSelectionFocus)
    {
      PartInfoRec* pInfo = (PartInfoRec*) ownerFrame->GetPartInfo(ev);
      pInfo->fIsActive = kODFalse;
    }

   SOM_CATCH_ALL
   SOM_ENDTRY
}

SOM_Scope void  SOMLINK SimplePartCloneInto(SimplePart *somSelf, Environment *ev,
    ODDraftKey key,
    ODStorageUnit* storageUnit,
    ODFrame* scopeFrame)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartCloneInto");

  SOM_TRY

  ODStorageUnit*  su = somSelf->GetStorageUnit(ev);
  ODDraft*    draft = su->GetDraft(ev);

  somSelf->Externalize(ev);

    ODID scopeFrameID = 0;
    if (scopeFrame != kODNULL)
      scopeFrameID = scopeFrame->GetStorageUnit(ev)->GetID(ev);
    su->CloneInto(ev, key, storageUnit, scopeFrameID);

    if(!su->Exists(ev, kODPropContents, kSimplePartKind, 0))
      su->AddProperty(ev, kODPropContents)->AddValue(ev, kSimplePartKind);
    StorageUnitSetValue(su, ev, sizeof(simpleContent),  &_fContentStruct);

  SOM_CATCH_ALL
  SOM_ENDTRY

}


SOM_Scope void  SOMLINK SimplePartExternalizeKinds(SimplePart *somSelf,
                                                    Environment *ev,
                                                   ODTypeList* kindset)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartExternalizeKinds");

   SOM_TRY

    somSelf->Externalize(ev);

   SOM_CATCH_ALL
   SOM_ENDTRY
}

SOM_Scope void  SOMLINK SimplePartExternalize(SimplePart *somSelf,
                                               Environment *ev)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartExternalize");

   SOM_TRY

    ODStorageUnit* su = somSelf->GetStorageUnit(ev);

// add a value for color and set default color

     if(su->Exists(ev, kODPropContents, kSimplePartKind, 0))
     {
         su->Focus(ev, kODPropContents, kODPosUndefined, kSimplePartKind,
                   0, kODPosUndefined);
         su->Remove(ev);
         su->AddValue(ev, kSimplePartKind);
         StorageUnitSetValue(su, ev, sizeof(simpleContent),  &_fContentStruct);
     }
     else
     {
         su->AddProperty(ev, kODPropContents)->AddValue(ev, kSimplePartKind);
         StorageUnitSetValue(su, ev, sizeof(simpleContent),  &_fContentStruct);
     }

   SOM_CATCH_ALL
   SOM_ENDTRY
}

SOM_Scope void  SOMLINK SimplePartChangeKind(SimplePart *somSelf,
                                              Environment *ev,
                                             ODType kind)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartChangeKind");
    ODStorageUnit * su = somSelf->GetStorageUnit(ev);
    su->Focus(ev, kODPropContents, kODPosUndefined, kODTypeAll, 0, kODPosUndefined);
    su->Remove(ev);
    su->AddProperty(ev, kODPropContents)->AddValue(ev, kSimplePartKind);
    StorageUnitSetValue(su, ev, sizeof(simpleContent),  &_fContentStruct);

}

SOM_Scope ODBoolean  SOMLINK SimplePartHandleEvent(SimplePart *somSelf,
                                                    Environment *ev,
                                                   ODEventData* event,
                                                   ODFrame* frame,
                                                   ODFacet* facet,
                                                   ODEventInfo* eventInfo)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartHandleEvent");

    ODBoolean handled = kODFalse;

   SOM_TRY

    switch (event->msg)
    {

       case WM_BUTTON1DBLCLK:
       case WM_BUTTON2DBLCLK:
       case WM_BUTTON3DBLCLK:
          {
           somSelf->Open(ev, frame);
           handled = kODTrue;
          }
          break;

       case WM_BUTTON1CLICK:
          {
             ODPoint windowPt(ODIntToFixed(SHORT1FROMMP(event->mp1)),
                              ODIntToFixed(SHORT2FROMMP(event->mp1)));
             handled = somSelf->HandleMouseDown(ev, facet, &windowPt, event);
          }
          break;


       case WM_CONTEXTMENU       :
          {
           PartInfoRec* pInfo = (PartInfoRec*) frame->GetPartInfo(ev);
           if (!(pInfo->fIsActive))
                 somSelf->ActivateFrame(ev, frame);
           _fPopup->Display(ev);
          handled = kODTrue;
          }
          break;
       case WM_CHAR:
          if (!(SHORT1FROMMP(event->mp1) & KC_KEYUP)) {
             handled = somSelf->HandleKeyDown(ev, frame, event);
          } /* endif */
          break;

       case WM_ACTIVATE:
          handled = kODTrue; // actually ignored by dispatcher
          if (SHORT1FROMMP(event->mp1) != 0)
             somSelf->ActivatingWindow(ev, frame);
          else
             somSelf->DeActivatingWindow(ev, frame);
          break;

       case WM_COMMAND:
          if (SHORT1FROMMP(event->mp2) & CMDSRC_MENU ||
              SHORT1FROMMP(event->mp2) & CMDSRC_ACCELERATOR)
          {
             handled = somSelf->HandleMenuEvent(ev, frame, event);
          }
          break;

       default:
          return kODFalse;
    }

   SOM_CATCH_ALL
   SOM_ENDTRY

    return handled;
}

SOM_Scope ODBoolean  SOMLINK SimplePartHandleEventInEmbedded(SimplePart *somSelf,
                                                              Environment *ev,
                                                             ODEventData* event,
                                                             ODFrame* frame,
                                                             ODFacet* facet,
                                                             ODFrame* embeddedFrame,
                                                             ODFacet* embeddedFacet)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartHandleEventInEmbedded");

    return kODFalse;
}

SOM_Scope void  SOMLINK SimplePartMouseEnter(SimplePart *somSelf,
                                              Environment *ev,
                                             ODFacet* facet,
                                             ODPoint* where)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartMouseEnter");

                                      //   pointer type we prefer.
}

SOM_Scope void  SOMLINK SimplePartMouseWithin(SimplePart *somSelf,
                                               Environment *ev,
                                              ODFacet* facet,
                                              ODPoint* where)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartMouseWithin");

}

SOM_Scope void  SOMLINK SimplePartMouseLeave(SimplePart *somSelf,
                                              Environment *ev,
                                             ODFacet* facet)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartMouseLeave");

    // we may need to restore the pointer here.  I'll check later. todo (jso 94-9)
}

SOM_Scope void  SOMLINK SimplePartAdjustMenus(SimplePart *somSelf,
                                               Environment *ev,
                                              ODFrame* frame)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartAdjustMenus");

   SOM_TRY

    //enable the menu items that we support
    _fMenuBar->EnableMenuItem(ev,IDMS_VIEW,VIEW_SHOWAS,kODTrue);

    //PM will enable all submenus as well, so we disable the
    //views we don't support yet
    _fMenuBar->EnableMenuItem(ev,IDMS_VIEW,VIEW_SASMALLICON, kODFalse);
    _fMenuBar->EnableMenuItem(ev,IDMS_VIEW,VIEW_SALARGEICON, kODFalse);
    _fMenuBar->EnableMenuItem(ev,IDMS_VIEW,VIEW_SATHUMBNAIL, kODFalse);

   SOM_CATCH_ALL
   SOM_ENDTRY

}

SOM_Scope void  SOMLINK SimplePartUndoAction(SimplePart *somSelf,
                                              Environment *ev,
                                             ODActionData* actionState)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartUndoAction");

    // not much to undo yet
}

SOM_Scope void  SOMLINK SimplePartRedoAction(SimplePart *somSelf,
                                              Environment *ev,
                                             ODActionData* actionState)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartRedoAction");

    // not much to redo yet
}

SOM_Scope void  SOMLINK SimplePartDisposeActionState(SimplePart *somSelf,
                                                      Environment *ev,
                                                     ODActionData* actionState,
                                                     ODDoneState doneState)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartDisposeActionState");

    // not much to redo
}

SOM_Scope void  SOMLINK SimplePartWriteActionState(SimplePart *somSelf,
                                                    Environment *ev,
                                                   ODActionData* actionState,
                                                   ODStorageUnitView* storageUnitView)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartWriteActionState");

}

SOM_Scope ODActionData  SOMLINK SimplePartReadActionState(SimplePart *somSelf,
                                                    Environment *ev,
                                                   ODStorageUnitView* storageUnitView)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartReadActionState");
    ODActionData data;
    data._maximum = 0;
    data._length = 0;
    data._buffer = kODNULL;
    return data;
}

SOM_Scope void  SOMLINK SimplePartInitPart(SimplePart *somSelf,
                                            Environment *ev,
    ODStorageUnit* storageUnit, ODPart* partWrapper)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartInitPart");

   SOM_TRY

    if (_fIsInitialized)
      return;

    _fIsInitialized = kODTrue;
    _fPartWrapper = partWrapper;

    parent_InitPart(somSelf, ev, storageUnit, partWrapper);


    _fPartWrapper = partWrapper;

    somSelf->CommonInitSimplePart(ev);

    static int defcolor = 2;

    _fContentStruct.fColor = (defcolor++) % 8;  // pick semi random color

    ODStorageUnit* su = somSelf->GetStorageUnit(ev);
    if(!su->Exists(ev, kODPropContents, kSimplePartKind, 0))
    {
        su->AddProperty(ev, kODPropContents)->AddValue(ev, kSimplePartKind);
    }

   // The following code is a test for showing additional columns in the details
   // view. - UI Team. (125863)
   char *dummyStr = "Hello World";
   ODULong dummyNum = 98765;

    if(!su->Exists(ev, kSimplePartAddProps, kODNULL, 0)) {
        su->AddProperty(ev, kSimplePartAddProps);

        su->Focus(ev, kSimplePartAddProps, kODPosUndefined, kODNULL, 0, kODPosUndefined);
        su->AddValue(ev, kSimplePartAddProp1);
        StorageUnitSetValue(su, ev, strlen(dummyStr) + 1,  dummyStr);

        su->Focus(ev, kSimplePartAddProps, kODPosUndefined, kODNULL, 0, kODPosUndefined);
        su->AddValue(ev, kSimplePartAddProp2);
        StorageUnitSetValue(su, ev, sizeof(ODULong),  &dummyNum);

        time_t lt;
        time(&lt);
        su->Focus(ev, kSimplePartAddProps, kODPosUndefined, kODNULL, 0, kODPosUndefined);
        su->AddValue(ev, kSimplePartAddProp3);
        StorageUnitSetValue(su, ev, sizeof(ODULong),  &lt);

    }

   SOM_CATCH_ALL
   SOM_ENDTRY

}

SOM_Scope void  SOMLINK SimplePartInitPartFromStorage(SimplePart *somSelf,
                                                       Environment *ev,
                                                       ODStorageUnit* storageUnit, ODPart* partWrapper)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartInitPartFromStorage");

   SOM_TRY

    if (_fIsInitialized)
      return;

    _fIsInitialized = kODTrue;
    _fPartWrapper = partWrapper;

    parent_InitPartFromStorage(somSelf, ev, storageUnit, partWrapper);

    _fPartWrapper = partWrapper;

    somSelf->CommonInitSimplePart(ev);

    static int defcolor = 2;

    ODStorageUnit* su = somSelf->GetStorageUnit(ev);

    // 125416
    if(!su->Exists(ev, kODPropContents, kSimplePartKind, 0))
    {
        su->AddProperty(ev, kODPropContents)->AddValue(ev, kSimplePartKind);
    }
    // end 125416
    su->Focus(ev, kODPropContents, kODPosUndefined, kSimplePartKind, 0, kODPosUndefined);
    StorageUnitGetValue(su, ev, sizeof(simpleContent),& _fContentStruct);

    // Clean up the storage unit
    su->Focus(ev, kODPropContents, kODPosUndefined, kODTypeAll, 0, kODPosUndefined);
    su->Remove(ev);
    su->AddProperty(ev, kODPropContents)->AddValue(ev, kSimplePartKind);

   SOM_CATCH_ALL
   SOM_ENDTRY

}

SOM_Scope void  SOMLINK SimplePartRelease(SimplePart *somSelf,
                                           Environment *ev)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartRelease");

   SOM_TRY

    SimplePart_parent_ODPart_Release(somSelf, ev);
    if (somSelf->GetRefCount(ev) == 0)
       somSelf->GetStorageUnit(ev)->GetDraft(ev)->ReleasePart(ev, somSelf);

   SOM_CATCH_ALL
   SOM_ENDTRY

}

SOM_Scope void  SOMLINK SimplePartActivate(SimplePart *somSelf,
                                                Environment *ev,
                                                ODFacet* facet)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartActivate");

   SOM_TRY

    if (!facet->GetWindow(ev)->IsActive(ev))
       facet->GetWindow(ev)->Select(ev);
    else {
       PartInfoRec* pInfo = (PartInfoRec*) facet->GetFrame(ev)->GetPartInfo(ev);
       if (!pInfo->fIsActive) {
          somSelf->ActivateFrame(ev, facet->GetFrame(ev));
       } /* endif */
    } /* endif */

   SOM_CATCH_ALL
   SOM_ENDTRY

}

#ifdef __IBMC___
  #pragma linkage (SOMInitModule, system)
#endif

SOMEXTERN void SOMLINK SOMInitModule (long majorVersion, long minorVersion,
                                 string className)
{
   SOM_IgnoreWarning (majorVersion);  /* This function makes   */
   SOM_IgnoreWarning (minorVersion);  /* no use of the passed  */
   SOM_IgnoreWarning (className);     /* arguments.            */

   SimplePartNewClass ( SimplePart_MajorVersion, SimplePart_MinorVersion);
}


SOM_Scope ODBoolean  SOMLINK SimplePartHasExtension(SimplePart *somSelf,
                                                     Environment *ev,
                                                    ODType extensionName)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartHasExtension");

   SOM_TRY

    return (SimplePart_parent_ODPart_HasExtension(somSelf, ev,
                                                  extensionName));

   SOM_CATCH_ALL
   SOM_ENDTRY

    return kODFalse;
}

SOM_Scope ODExtension*  SOMLINK SimplePartAcquireExtension(SimplePart *somSelf,
                                                        Environment *ev,
                                                       ODType extensionName)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartAcquireExtension");

    SOM_TRY

       return (SimplePart_parent_ODPart_AcquireExtension(somSelf, ev,
                                                  extensionName));

    SOM_CATCH_ALL
    SOM_ENDTRY

    return kODNULL;
}

SOM_Scope void  SOMLINK SimplePartReleaseExtension(SimplePart *somSelf,
                                                    Environment *ev,
                                                   ODExtension* extension)
{
    SimplePartData *somThis = SimplePartGetData(somSelf);
    SimplePartMethodDebug("SimplePart","SimplePartReleaseExtension");

    SOM_TRY

       SimplePart_parent_ODPart_ReleaseExtension(somSelf, ev, extension);

    SOM_CATCH_ALL
    SOM_ENDTRY
}


SOM_Scope ISOString  SOMLINK M_SimplePartclsGetODPartHandlerName(M_SimplePart *somSelf,
                                                                  Environment *ev)
{
    /* M_SimplePartData *somThis = M_SimplePartGetData(somSelf); */
    M_SimplePartMethodDebug("M_SimplePart","M_SimplePartclsGetODPartHandlerName");

    string handlerName = kPartHandlerName;
    return (ISOString) handlerName;
}


SOM_Scope string  SOMLINK M_SimplePartclsGetODPartHandlerDisplayName(M_SimplePart *somSelf,
                                                                      Environment *ev)
{
    /* M_SimplePartData *somThis = M_SimplePartGetData(somSelf); */
    M_SimplePartMethodDebug("M_SimplePart","M_SimplePartclsGetODPartHandlerDisplayName");

    string displayName =  "Simple Part";
    return displayName;

}

SOM_Scope _IDL_SEQUENCE_PartKindInfo  SOMLINK M_SimplePartclsGetODPartKinds(M_SimplePart *somSelf,
                                                                             Environment *ev)
{
    /* M_SimplePartData *somThis = M_SimplePartGetData(somSelf); */
    M_SimplePartMethodDebug("M_SimplePart","M_SimplePartclsGetODPartKinds");

    _IDL_SEQUENCE_PartKindInfo SimplePartInfo;
    // Create structure PartKindInfo  and allocate memory for variable
    PartKindInfo * info = (PartKindInfo *)SOMMalloc(sizeof(PartKindInfo));
    info->partKindName = (ISOString) SOMMalloc(strlen(kSimplePartKind) + 1);
    info->partKindDisplayName = (string)SOMMalloc(strlen(kSimplePartKindDisplayName)+1);
    info->filenameFilters =  (string)SOMMalloc(strlen("")+1);
    info->filenameTypes =  (string)SOMMalloc(strlen("")+1);
    info->categories =  (string)SOMMalloc(strlen(kSimplePartCategory) + 1);
    info->categoryDisplayName =  (string)SOMMalloc(strlen("Sample") + 1);
    info->objectID =  (string)SOMMalloc(strlen("") + 1);
    // Copy the information into the structure
    strcpy(info->partKindName , kSimplePartKind);
    strcpy(info->partKindDisplayName, kSimplePartKindDisplayName);
    strcpy(info->filenameFilters, "");
    strcpy(info->filenameTypes, "");
    strcpy(info->categories, kSimplePartCategory);
    strcpy(info->categoryDisplayName, "Sample");
    strcpy(info->objectID, "");


    SimplePartInfo._maximum = 1;
    SimplePartInfo._length = 1;
    SimplePartInfo._buffer = info;

    return SimplePartInfo;



}

SOM_Scope string  SOMLINK M_SimplePartclsGetOLE2ClassId(M_SimplePart *somSelf,
                                                         Environment *ev)
{
    /* M_SimplePartData *somThis = M_SimplePartGetData(somSelf); */
    M_SimplePartMethodDebug("M_SimplePart","M_SimplePartclsGetOLE2ClassId");

    string classID = "";
    return classID;
}

SOM_Scope string  SOMLINK M_SimplePartclsGetWindowsIconFileName(M_SimplePart *somSelf,
                                                                 Environment *ev)
{
    /* M_SimplePartData *somThis = M_SimplePartGetData(somSelf); */
    M_SimplePartMethodDebug("M_SimplePart","M_SimplePartclsGetWindowsIconFileName");

    string fileName = "";
    return fileName;
}

